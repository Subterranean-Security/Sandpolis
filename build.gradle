//============================================================================//
//                                                                            //
//                Copyright Â© 2015 - 2020 Subterranean Security               //
//                                                                            //
//  This source file is subject to the terms of the Mozilla Public License    //
//  version 2. You may not use this file except in compliance with the MPL    //
//  as published by the Mozilla Foundation at:                                //
//                                                                            //
//    https://mozilla.org/MPL/2.0                                             //
//                                                                            //
//=========================================================S A N D P O L I S==//

buildscript {
	repositories {
		mavenCentral()
		jcenter()
	}

	dependencies {
		classpath ':com.sandpolis.gradle.plugin:'
		classpath ':com.sandpolis.gradle.soi:'
		classpath ':com.sandpolis.gradle.codegen:'
	}
}

plugins {
	id "com.diffplug.gradle.spotless" version "4.5.0"
}

spotless {
	cpp {
		target '**/*.cc', '**/*.hh'

		eclipse()
		endWithNewline()
		indentWithTabs()
	}
	java {
		target '**/*.java'

		// Exclude generated sources
		targetExclude '**/gen/main/java/**'

		eclipse().configFile('gradle/resources/EclipseConventions.xml')
		trimTrailingWhitespace()
		endWithNewline()

		licenseHeaderFile file('gradle/resources/header_java.txt'), "package"
	}
	format 'javaModules', {
		target '**/module-info.java'

		trimTrailingWhitespace()
		endWithNewline()

		licenseHeaderFile file('gradle/resources/header_java.txt'), "(module|open module)"
	}
	format 'proto', {
		target '**/*.proto'

		trimTrailingWhitespace()
		endWithNewline()
		indentWithSpaces()

		licenseHeaderFile file('gradle/resources/header_java.txt'), "syntax"
	}
	format 'groovy', {
		target '**/*.groovy'

		trimTrailingWhitespace()
		endWithNewline()

		licenseHeaderFile file('gradle/resources/header_java.txt'), "package"
	}
	format 'gradle', {
		target '**/build.gradle'

		trimTrailingWhitespace()
		endWithNewline()
		indentWithTabs()

		licenseHeaderFile file('gradle/resources/header_gradle.txt'), "(plugins|buildscript)"
	}
	format 'swift', {
		target '**/*.swift'

		trimTrailingWhitespace()
		endWithNewline()
		indentWithTabs()

		licenseHeaderFile file('gradle/resources/header_swift.txt'), "import"
	}
	format 'fxml', {
		target '**/*.fxml'

		eclipseWtp('xml')
	}
	format 'css', {
		target '**/*.css'

		eclipseWtp('css')
	}
	format 'json', {
		target '**/*.json'

		// Exclude iOS projects
		targetExclude '**/com.sandpolis.viewer.lockstone/**'

		eclipseWtp('json')
	}
}

// Apply repository configuration
allprojects {
	repositories {
		mavenLocal()
		mavenCentral()
	}

	buildscript {
		repositories {
			mavenCentral()
		}
	}

	plugins.withType(JavaPlugin).configureEach {
        java {
            modularity.inferModulePath = true
        }
    }
}

// Apply metadata configuration
allprojects {
	version = System.properties['versions.sandpolis']
}

subprojects {
	plugins.withType(JavaPlugin) {
		// Apply testing configuration
		test {
			useJUnitPlatform()

			testLogging {
				exceptionFormat = 'full'
			}
		}

		// Provide install task for scripts
		task install(type: Copy) {
			from configurations.runtimeClasspath
			from jar.outputs.files
			into System.getProperty("lib_dest")
		}
	}
}

// All modules that will be published to the release repository
def publishProjects = [
	'com.sandpolis.client.mega',
	'com.sandpolis.core.instance',
	'com.sandpolis.core.ipc',
	'com.sandpolis.core.net',
	'com.sandpolis.core.soi',
	'com.sandpolis.core.util',
	'com.sandpolis.core.viewer',
	'com.sandpolis.plugin.desktop',
	'com.sandpolis.plugin.device',
	'com.sandpolis.plugin.filesys',
	'com.sandpolis.plugin.shell',
	'com.sandpolis.plugin.sysinfo',
	'com.sandpolis.plugin.upgrade',
	'com.sandpolis.server.vanilla',
	'com.sandpolis.viewer.ascetic',
	'com.sandpolis.viewer.lifegem'
]

// Apply publishing configuration
configure(subprojects.findAll {publishProjects.contains(it.name)}) {
	apply plugin: 'maven-publish'
	apply plugin: 'signing'

	group = 'com.sandpolis'
	archivesBaseName = it.name.substring(4).replaceAll("\\.", "-")

	afterEvaluate { sub ->
		java {
			withJavadocJar()
			withSourcesJar()
		}

		publishing {
			publications {
				mavenJava(MavenPublication) {
					groupId = sub.group
					artifactId = sub.archivesBaseName
					version = sub.version

					if (it.name.startsWith('com.sandpolis.plugin')) {
						artifact pluginArchive
					} else {
						from sub.components.java
					}

					pom {
						name = sub.name
						description = sub.eclipse.project.comment
						url = 'https://github.com/sandpolis/sandpolis'
						licenses {
							license {
								name = 'Mozilla Public License, Version 2.0'
								url = 'https://mozilla.org/MPL/2.0'
							}
						}
						developers {
							developer {
								id = 'cilki'
								name = 'Tyler Cook'
								email = 'tcc@sandpolis.com'
							}
						}
						scm {
							url = 'https://github.com/sandpolis/sandpolis'
							connection = 'scm:git:git://github.com/sandpolis/sandpolis.git'
							developerConnection = 'scm:git:ssh://git@github.com/sandpolis/sandpolis.git'
						}
					}
				}
			}
			repositories {
				maven {
					url = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
					credentials {
						username System.properties['publishing.sonatype.username']
						password System.properties['publishing.sonatype.password']
					}
				}
			}
		}
		signing {
			sign publishing.publications.mavenJava
		}
	}
}
