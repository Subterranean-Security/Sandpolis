//============================================================================//
//                                                                            //
//                Copyright Â© 2015 - 2020 Subterranean Security               //
//                                                                            //
//  This source file is subject to the terms of the Mozilla Public License    //
//  version 2. You may not use this file except in compliance with the MPL    //
//  as published by the Mozilla Foundation at:                                //
//                                                                            //
//    https://mozilla.org/MPL/2.0                                             //
//                                                                            //
//=========================================================S A N D P O L I S==//
package com.sandpolis.gradle.codegen.attribute

import static javax.lang.model.element.Modifier.*

import com.squareup.javapoet.AnnotationSpec
import com.squareup.javapoet.ClassName
import com.squareup.javapoet.FieldSpec
import com.squareup.javapoet.JavaFile
import com.squareup.javapoet.MethodSpec
import com.squareup.javapoet.ParameterizedTypeName
import com.squareup.javapoet.TypeSpec

import org.gradle.api.DefaultTask
import org.gradle.api.tasks.TaskAction

/**
 * Generator for attribute implementations.
 *
 * @author cilki
 */
class AttributeImplementationGenerator extends DefaultTask {

	def types = [
		"java.lang.String",
		"java.lang.Boolean",
		"java.lang.Integer",
		"java.lang.Long",
		"java.lang.Double",
		"com.sandpolis.core.util.Platform.OsType",
		"com.sandpolis.core.util.Platform.Instance",
		"com.sandpolis.core.util.Platform.InstanceFlavor"
	]

	@TaskAction
	void action () {

		types.collect{ClassName.bestGuess(it)}.each { type ->

			// Create the class
			def attributeClass = TypeSpec.classBuilder(type.simpleName() + "Attribute").addModifiers(PUBLIC)
				.addAnnotation(ClassName.bestGuess("javax.persistence.Entity"))
				.superclass(ParameterizedTypeName.get(ClassName.bestGuess("com.sandpolis.core.instance.data.Attribute"), type))

			// Add value field
			def valueField = FieldSpec.builder(type, "value", PRIVATE)
			attributeClass.addField(valueField.build())

			// Add get method
			def getMethod = MethodSpec.methodBuilder("get")
				.addModifiers(PUBLIC)
				.addAnnotation(Override.class)
				.returns(type)
				.addStatement("return value")
			attributeClass.addMethod(getMethod.build())

			// Add set method
			def setMethod = MethodSpec.methodBuilder("set")
				.addModifiers(PUBLIC)
				.addAnnotation(Override.class)
				.addParameter(type, "value")
				.addStatement("this.value = value")
			attributeClass.addMethod(setMethod.build())

			// Add timestamp method
			def timestampMethod = MethodSpec.methodBuilder("timestamp")
				.addModifiers(PUBLIC)
				.addAnnotation(Override.class)
				.returns(java.util.Date.class)
				.addStatement("return null")
			attributeClass.addMethod(timestampMethod.build())

			// Add serialize method
			def serializeMethod = MethodSpec.methodBuilder("serialize")
				.addModifiers(PUBLIC)
				.addAnnotation(Override.class)
				.returns(ClassName.bestGuess("com.sandpolis.core.instance.Attribute.ProtoAttribute"))
				.addStatement("return \$T.newBuilder().build()", ClassName.bestGuess("com.sandpolis.core.instance.Attribute.ProtoAttribute"))
			attributeClass.addMethod(serializeMethod.build())

			// Add merge method
			def mergeMethod = MethodSpec.methodBuilder("merge")
				.addModifiers(PUBLIC)
				.addAnnotation(Override.class)
				.addException(Exception.class)
				.addParameter(ClassName.bestGuess("com.sandpolis.core.instance.Attribute.ProtoAttribute"), "delta")
				.addStatement("set(null)")
			attributeClass.addMethod(mergeMethod.build())

			// Output the class
			JavaFile.builder("${project.name}.data", attributeClass.build())
				.addFileComment("This source file was automatically generated by the Sandpolis codegen plugin.")
				.skipJavaLangImports(true).build().writeTo(project.file("gen/main/java"));
		}		
	}
}
