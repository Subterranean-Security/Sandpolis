//============================================================================//
//                                                                            //
//                Copyright Â© 2015 - 2020 Subterranean Security               //
//                                                                            //
//  This source file is subject to the terms of the Mozilla Public License    //
//  version 2. You may not use this file except in compliance with the MPL    //
//  as published by the Mozilla Foundation at:                                //
//                                                                            //
//    https://mozilla.org/MPL/2.0                                             //
//                                                                            //
//=========================================================S A N D P O L I S==//
package com.sandpolis.gradle.codegen.attribute

import static javax.lang.model.element.Modifier.*

import com.squareup.javapoet.AnnotationSpec
import com.squareup.javapoet.ClassName
import com.squareup.javapoet.FieldSpec
import com.squareup.javapoet.JavaFile
import com.squareup.javapoet.MethodSpec
import com.squareup.javapoet.ParameterizedTypeName
import com.squareup.javapoet.TypeSpec

import org.gradle.api.DefaultTask
import org.gradle.api.tasks.TaskAction

/**
 * Generator for attribute implementations.
 *
 * @author cilki
 */
class AttributeImplementationGenerator extends DefaultTask {

	def types = [
		"java.lang.String",
		"java.lang.Boolean",
		"java.lang.Integer",
		"java.lang.Long",
		"java.lang.Double",
		"com.sandpolis.core.foundation.Platform.OsType",
		"com.sandpolis.core.instance.Metatypes.InstanceType",
		"com.sandpolis.core.instance.Metatypes.InstanceFlavor"
	]

	@TaskAction
	void action() {

		types.collect{ClassName.bestGuess(it)}.each { type ->
			if (!type.toString().startsWith("java.lang")) {
				generateConverter(type)
			}

			generateAttribute(type)
			generateListAttribute(type)
		}
	}

	void generateAttribute(type) {
		def attributeClass = TypeSpec.classBuilder(type.simpleName() + "Attribute").addModifiers(PUBLIC)
			.addAnnotation(ClassName.bestGuess("javax.persistence.Entity"))
			.superclass(ParameterizedTypeName.get(ClassName.bestGuess("com.sandpolis.core.instance.data.Attribute"), type))

		// Add value field
		def valueField = FieldSpec.builder(type, "value", PRIVATE)

		if (!type.toString().startsWith("java.lang")) {
			valueField.addAnnotation(AnnotationSpec.builder(ClassName.bestGuess("javax.persistence.Convert"))
				.addMember("converter", "\$T.class",
					ClassName.bestGuess("com.sandpolis.core.instance.data.${type.simpleName()}Converter")).build())
		}
		attributeClass.addField(valueField.build())

		// Add get method
		def getMethod = MethodSpec.methodBuilder("get")
			.addModifiers(PUBLIC)
			.addAnnotation(Override.class)
			.returns(type)
			.addStatement("return value")
		attributeClass.addMethod(getMethod.build())

		// Add set method
		def setMethod = MethodSpec.methodBuilder("set")
			.addModifiers(PUBLIC)
			.addAnnotation(Override.class)
			.addParameter(type, "value")
			.addStatement("this.value = value")
		attributeClass.addMethod(setMethod.build())

		// Add timestamp method
		def timestampMethod = MethodSpec.methodBuilder("timestamp")
			.addModifiers(PUBLIC)
			.addAnnotation(Override.class)
			.returns(java.util.Date.class)
			.addStatement("return null")
		attributeClass.addMethod(timestampMethod.build())

		// Add serialize method
		def serializeMethod = MethodSpec.methodBuilder("serialize")
			.addModifiers(PUBLIC)
			.addAnnotation(Override.class)
			.returns(ClassName.bestGuess("com.sandpolis.core.instance.Attribute.ProtoAttribute"))
			.addStatement("return \$T.newBuilder().build()", ClassName.bestGuess("com.sandpolis.core.instance.Attribute.ProtoAttribute"))
		attributeClass.addMethod(serializeMethod.build())

		// Add merge method
		def mergeMethod = MethodSpec.methodBuilder("merge")
			.addModifiers(PUBLIC)
			.addAnnotation(Override.class)
			.addException(Exception.class)
			.addParameter(ClassName.bestGuess("com.sandpolis.core.instance.Attribute.ProtoAttribute"), "delta")
			.addStatement("set(null)")
		attributeClass.addMethod(mergeMethod.build())

		// Output the class
		JavaFile.builder("${project.name}.data", attributeClass.build())
			.addFileComment("This source file was automatically generated by the Sandpolis codegen plugin.")
			.skipJavaLangImports(true).build().writeTo(project.file("gen/main/java"));
	}

	void generateListAttribute(type) {
		// Alter the type to be a list
		def listType = ParameterizedTypeName.get(ClassName.bestGuess("java.util.List"), type)

		def attributeListClass = TypeSpec.classBuilder(type.simpleName() + "ListAttribute").addModifiers(PUBLIC)
			.addAnnotation(ClassName.bestGuess("javax.persistence.Entity"))
			.superclass(ParameterizedTypeName.get(ClassName.bestGuess("com.sandpolis.core.instance.data.Attribute"), listType))

		// Add value field
		def valueField = FieldSpec.builder(listType, "value", PRIVATE)
		valueField.addAnnotation(ClassName.bestGuess("javax.persistence.ElementCollection"))

		if (!type.toString().startsWith("java.lang")) {
			valueField.addAnnotation(AnnotationSpec.builder(ClassName.bestGuess("javax.persistence.Convert"))
				.addMember("converter", "\$T.class",
					ClassName.bestGuess("com.sandpolis.core.instance.data.${type.simpleName()}Converter")).build())
		}
		attributeListClass.addField(valueField.build())

		// Add get method
		def getMethod = MethodSpec.methodBuilder("get")
			.addModifiers(PUBLIC)
			.addAnnotation(Override.class)
			.returns(listType)
			.addStatement("return value")
		attributeListClass.addMethod(getMethod.build())

		// Add set method
		def setMethod = MethodSpec.methodBuilder("set")
			.addModifiers(PUBLIC)
			.addAnnotation(Override.class)
			.addParameter(listType, "value")
			.addStatement("this.value = value")
		attributeListClass.addMethod(setMethod.build())

		// Add timestamp method
		def timestampMethod = MethodSpec.methodBuilder("timestamp")
			.addModifiers(PUBLIC)
			.addAnnotation(Override.class)
			.returns(java.util.Date.class)
			.addStatement("return null")
		attributeListClass.addMethod(timestampMethod.build())

		// Add serialize method
		def serializeMethod = MethodSpec.methodBuilder("serialize")
			.addModifiers(PUBLIC)
			.addAnnotation(Override.class)
			.returns(ClassName.bestGuess("com.sandpolis.core.instance.Attribute.ProtoAttribute"))
			.addStatement("return \$T.newBuilder().build()", ClassName.bestGuess("com.sandpolis.core.instance.Attribute.ProtoAttribute"))
		attributeListClass.addMethod(serializeMethod.build())

		// Add merge method
		def mergeMethod = MethodSpec.methodBuilder("merge")
			.addModifiers(PUBLIC)
			.addAnnotation(Override.class)
			.addException(Exception.class)
			.addParameter(ClassName.bestGuess("com.sandpolis.core.instance.Attribute.ProtoAttribute"), "delta")
			.addStatement("set(null)")
		attributeListClass.addMethod(mergeMethod.build())

		// Output the class
		JavaFile.builder("${project.name}.data", attributeListClass.build())
			.addFileComment("This source file was automatically generated by the Sandpolis codegen plugin.")
			.skipJavaLangImports(true).build().writeTo(project.file("gen/main/java"));
	}

	void generateConverter(type) {
		def converterClass = TypeSpec.classBuilder(type.simpleName() + "Converter").addModifiers(PUBLIC)
				.addAnnotation(ClassName.bestGuess("javax.persistence.Converter"))

		// Add convertToDatabaseColumn
		def convertToDatabaseColumn = MethodSpec.methodBuilder("convertToDatabaseColumn")
			.addModifiers(PUBLIC)
			.addAnnotation(Override.class)
			.addParameter(type, "value")

		// Add convertToEntityAttribute
		def convertToEntityAttribute = MethodSpec.methodBuilder("convertToEntityAttribute")
			.addModifiers(PUBLIC)
			.addAnnotation(Override.class)
			.returns(type)

		switch (type.toString()) {
		case "com.sandpolis.core.foundation.Platform.OsType":
		case "com.sandpolis.core.instance.Metatypes.InstanceType":
		case "com.sandpolis.core.instance.Metatypes.InstanceFlavor":
			converterClass.addSuperinterface(ParameterizedTypeName.get(
				ClassName.bestGuess("javax.persistence.AttributeConverter"), type, ClassName.get(Integer.class)))
			convertToDatabaseColumn.addStatement("return value.getNumber()")
				.returns(Integer.class)
			convertToEntityAttribute.addStatement("return \$T.forNumber(value)", type)
				.addParameter(Integer.class, "value")
			break
		}

		converterClass.addMethod(convertToDatabaseColumn.build())
		converterClass.addMethod(convertToEntityAttribute.build())

		// Output the class
		JavaFile.builder("${project.name}.data", converterClass.build())
			.addFileComment("This source file was automatically generated by the Sandpolis codegen plugin.")
			.skipJavaLangImports(true).build().writeTo(project.file("gen/main/java"));
	}
}
