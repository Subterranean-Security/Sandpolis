//============================================================================//
//                                                                            //
//                Copyright Â© 2015 - 2020 Subterranean Security               //
//                                                                            //
//  This source file is subject to the terms of the Mozilla Public License    //
//  version 2. You may not use this file except in compliance with the MPL    //
//  as published by the Mozilla Foundation at:                                //
//                                                                            //
//    https://mozilla.org/MPL/2.0                                             //
//                                                                            //
//=========================================================S A N D P O L I S==//
package com.sandpolis.gradle.codegen.document

import static javax.lang.model.element.Modifier.*

import com.squareup.javapoet.AnnotationSpec
import com.squareup.javapoet.ClassName
import com.squareup.javapoet.FieldSpec
import com.squareup.javapoet.JavaFile
import com.squareup.javapoet.MethodSpec
import com.squareup.javapoet.ParameterizedTypeName
import com.squareup.javapoet.TypeSpec

/**
 * Generator for basic document bindings.
 */
class CoreDocumentBindingsGenerator extends DocumentBindingsGenerator {

	void processAttribute(parent, attribute) {

		if (attribute.type.endsWith("[]")) {
			// TODO ArrayAttribute
			return
		}

		def attributeType = ParameterizedTypeName.get(ClassName.bestGuess("com.sandpolis.core.instance.attribute.Attribute"), ClassName.bestGuess(attribute.type))

		// Add the attribute's getter method
		def getter = MethodSpec.methodBuilder(camel("get_" + attribute.name)).returns(ClassName.bestGuess(attribute.type))
			.addStatement("return ${camel(attribute.name)}().get()").addModifiers(PUBLIC)
		parent.addMethod(getter.build())

		// Add the attribute's property method
		def property = MethodSpec.methodBuilder(camel(attribute.name)).returns(attributeType)
			.addStatement("return document.attribute(${attribute.tag})").addModifiers(PUBLIC)
		parent.addMethod(property.build())

	}

	void processDocument(parent, document) {

		def documentClass = TypeSpec.classBuilder(document.name).addModifiers(PUBLIC)

		// Add document field
		def field = FieldSpec.builder(ClassName.bestGuess("com.sandpolis.core.instance.attribute.Document"), "document", PRIVATE)
		documentClass.addField(field.build())

		if (document.collections != null) {
			for (def subcollection : document.collections) {
				processCollection("${parent}.${document.tag}", subcollection)
			}
		}
		if (document.documents != null) {
			for (def subdocument : document.documents) {
				processDocument("${parent}.${document.tag}", subdocument)
			}
		}
		if (document.attributes != null) {
			for (def subattribute : document.attributes) {
				processAttribute(documentClass, subattribute)
			}
		}

		JavaFile.builder(project.name, documentClass.build())
			.addFileComment("This source file was automatically generated by the Sandpolis codegen plugin.")
			.skipJavaLangImports(true).build().writeTo(project.file("gen/main/java"));
	}
}
