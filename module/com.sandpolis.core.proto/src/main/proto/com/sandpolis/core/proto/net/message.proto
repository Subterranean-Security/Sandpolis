//============================================================================//
//                                                                            //
//                Copyright Â© 2015 - 2020 Subterranean Security               //
//                                                                            //
//  This source file is subject to the terms of the Mozilla Public License    //
//  version 2. You may not use this file except in compliance with the MPL    //
//  as published by the Mozilla Foundation at:                                //
//                                                                            //
//    https://mozilla.org/MPL/2.0                                             //
//                                                                            //
//=========================================================S A N D P O L I S==//
syntax = "proto3";

package net;

import "com/sandpolis/core/proto/net/msg_attribute.proto";
import "com/sandpolis/core/proto/net/msg_auth.proto";
import "com/sandpolis/core/proto/net/msg_client.proto";
import "com/sandpolis/core/proto/net/msg_cvid.proto";
import "com/sandpolis/core/proto/net/msg_generator.proto";
import "com/sandpolis/core/proto/net/msg_group.proto";
import "com/sandpolis/core/proto/net/msg_listener.proto";
import "com/sandpolis/core/proto/net/msg_login.proto";
import "com/sandpolis/core/proto/net/msg_network.proto";
import "com/sandpolis/core/proto/net/msg_ping.proto";
import "com/sandpolis/core/proto/net/msg_plugin.proto";
import "com/sandpolis/core/proto/net/msg_server.proto";
import "com/sandpolis/core/proto/net/msg_stream.proto";
import "com/sandpolis/core/proto/net/msg_user.proto";
import "com/sandpolis/core/proto/util/result.proto";
import "google/protobuf/any.proto";

option java_package = "com.sandpolis.core.proto.net";
option optimize_for = SPEED;

/**
 * A message type for all communication among instances.
 *
 * Message prefixes:
 *  RQ_*    A request message that warrants exactly one RS_* message
 *  RS_*    A response message for exactly one RQ_* message
 *  EV_*    An event message that does not warrant a response of any kind
 */
message MSG {

    // The final destination CVID
    // Note: This field is parsed manually and therefore must not change.
    int32 to = 1;

    // The original source CVID
    // Note: This field is parsed manually and therefore must not change.
    int32 from = 2;

    // The message context ID
    // For RQ messages, this
    // For RS messages, this field is the corresponding RQ message's context ID.
    // For EV messages, this field is the stream ID if applicable.
    int32 id = 3;

    oneof payload {

        // A plugin message
        google.protobuf.Any             plugin                          =    4;

        // A generic response indicating the outcome of some operation
        util.Outcome                    rs_outcome                      =    6;

        // msg_attribute
        RQ_AttributeQuery               rq_attribute_query              =   10;
        RS_AttributeQuery               rs_attribute_query              = 1010;
        RQ_AttributeStream              rq_attribute_stream             =   11;
        EV_AttributeStream              ev_attribute_stream             = 1011;

        // msg_auth
        RQ_NoAuth                       rq_no_auth                      =    7;
        RQ_PasswordAuth                 rq_password_auth                =    8;
        RQ_KeyAuth                      rq_key_auth                     =    9;

        // msg_cvid
        RQ_Cvid                         rq_cvid                         =  100;
        RS_Cvid                         rs_cvid                         =  101;

        // msg_generator
        RQ_Generate                     rq_generate                     =   13;
        RS_Generate                     rs_generate                     = 1013;

        // msg_group
        RQ_AddGroup                     rq_add_group                    =   14;
        RQ_RemoveGroup                  rq_remove_group                 =   15;
        RQ_ListGroups                   rq_list_groups                  =   16;
        RS_ListGroups                   rs_list_groups                  = 1016;
        RQ_GroupDelta                   rq_group_delta                  =   17;

        // msg_listener
        RQ_AddListener                  rq_add_listener                 =   18;
        RQ_RemoveListener               rq_remove_listener              =   19;
        RQ_ListenerDelta                rq_listener_delta               =   20;
        RQ_ChangeListener               rq_change_listener              =   21;

        // msg_login
        RQ_Login                        rq_login                        =   22;
        RQ_Logout                       rq_logout                       =   38;

        // msg_network
        EV_EndpointClosed               ev_endpoint_closed              =   23;
        EV_NetworkDelta                 ev_network_delta                =   24;
        RQ_DirectConnection             rq_direct_connection            =   25;
        RS_DirectConnection             rs_direct_connection            = 1025;
        RQ_Connection                   rq_connection                   =   26;

        // msg_ping
        RQ_Ping                         rq_ping                         =   27;
        RS_Ping                         rs_ping                         = 1027;

        // msg_plugin
        RQ_ArtifactDownload             rq_artifact_download            =   28;
        RS_ArtifactDownload             rs_artifact_download            = 1028;
        RQ_PluginInstall                rq_plugin_install               =   29;
        RQ_PluginList                   rq_plugin_list                  =   30;
        RS_PluginList                   rs_plugin_list                  = 1030;

        // msg_server
        RQ_ServerBanner                 rq_server_banner                =   31;
        RS_ServerBanner                 rs_server_banner                = 1031;

        // msg_stream
        RQ_StreamStop                   rq_stream_stop                  =   33;
        RQ_ProfileStream                rq_profile_stream               =   39;
        EV_ProfileStream                ev_profile_stream               =   40;

        // msg_user
        RQ_AddUser                      rq_add_user                     =   34;
        RQ_RemoveUser                   rq_remove_user                  =   35;
        RQ_UserDelta                    rq_user_delta                   =   36;

        // msg_client
        RQ_ClientMetadata               rq_client_metadata              =   37;
        RS_ClientMetadata               rs_client_metadata              = 1037;
    }
}
