/*******************************************************************************
* SANDPOLIS                                                                    *
* com.sandpolis.installer                                                      *
*******************************************************************************/

plugins {
	id 'eclipse'
	id 'java'

	id 'org.openjfx.javafxplugin' version '0.0.7'
	id "com.github.breadmoirai.github-release" version "2.2.9"
	id 'edu.sc.seis.launch4j' version '2.4.6'
}

javafx {
	modules = [ 'javafx.controls', 'javafx.fxml', 'javafx.graphics' ]
}

eclipse {
	project {
		name = 'com.sandpolis.installer'
		comment = 'The installer instance'
	}
}

configurations {
	installTargets
	jfxWin
	jfxLin
	jfxMac
}

dependencies {
	testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.5.0'

	implementation project(':module:com.sandpolis.core.instance')
	implementation project(':module:com.sandpolis.core.ipc')
	implementation project(':module:com.sandpolis.core.proto')
	implementation project(':module:com.sandpolis.core.soi')
	implementation project(':module:com.sandpolis.core.util')

	// https://github.com/google/guava
	implementation 'com.google.guava:guava:28.0-jre'

	// https://github.com/qos-ch/slf4j
	implementation 'org.slf4j:slf4j-api:1.7.26'

	// Installation targets
	installTargets project(':com.sandpolis.server.vanilla')
	installTargets project(':com.sandpolis.viewer.jfx')
	installTargets project(':com.sandpolis.viewer.cli')
	installTargets project(':com.sandpolis.client.mega')

	// JavaFX runtimes
	jfxWin 'org.openjfx:javafx-base:11.0.2:win'
	jfxWin 'org.openjfx:javafx-fxml:11.0.2:win'
	jfxWin 'org.openjfx:javafx-graphics:11.0.2:win'
	jfxWin 'org.openjfx:javafx-controls:11.0.2:win'

	jfxLin 'org.openjfx:javafx-base:11.0.2:linux'
	jfxLin 'org.openjfx:javafx-fxml:11.0.2:linux'
	jfxLin 'org.openjfx:javafx-graphics:11.0.2:linux'
	jfxLin 'org.openjfx:javafx-controls:11.0.2:linux'

	jfxMac 'org.openjfx:javafx-base:11.0.2:mac'
	jfxMac 'org.openjfx:javafx-fxml:11.0.2:mac'
	jfxMac 'org.openjfx:javafx-graphics:11.0.2:mac'
	jfxMac 'org.openjfx:javafx-controls:11.0.2:mac'
}

jar {
	manifest {
		attributes(
			'Main-Class': 'com.github.cilki.compact.BootProxy',
			'Boot-Class': 'com.sandpolis.installer.Main'
		)
	}

	from {
		configurations.runtimeClasspath.collect {
			it.name.startsWith("compact-classloader") ? zipTree(it) : it
		}
	}
}

task jarOnlineWin(type: Jar, dependsOn: jar) {
	baseName = "SandpolisInstaller-win"
	manifest {
		attributes(
			'Main-Class': 'com.github.cilki.compact.BootProxy',
			'Boot-Class': 'com.sandpolis.installer.Main'
		)
	}

	from (zipTree(jar.archivePath)) {
		exclude "javafx-*"
	}

	from {
		configurations.jfxWin
	}
}

task jarOnlineLin(type: Jar, dependsOn: jar) {
	baseName = "SandpolisInstaller-linux"
	manifest {
		attributes(
			'Main-Class': 'com.github.cilki.compact.BootProxy',
			'Boot-Class': 'com.sandpolis.installer.Main'
		)
	}

	from (zipTree(jar.archivePath)) {
		exclude "javafx-*"
	}

	from {
		configurations.jfxLin
	}
}

task jarOnlineMac(type: Jar, dependsOn: jar) {
	baseName = "SandpolisInstaller-mac"
	manifest {
		attributes(
			'Main-Class': 'com.github.cilki.compact.BootProxy',
			'Boot-Class': 'com.sandpolis.installer.Main'
		)
	}

	from (zipTree(jar.archivePath)) {
		exclude "javafx-*"
	}

	from {
		configurations.jfxMac
	}
}

task jarOffline(type: Jar, dependsOn: jar) {
	baseName = "SandpolisInstaller-offline"
	manifest {
		attributes(
			'Main-Class': 'com.github.cilki.compact.BootProxy',
			'Boot-Class': 'com.sandpolis.installer.Main'
		)
	}

	from (zipTree(jar.archivePath)) {
		exclude "javafx-*"
	}

	from {
		configurations.installTargets
	}

	from {
		configurations.jfxWin
	}

	from {
		configurations.jfxLin
	}

	from {
		configurations.jfxMac
	}
}

artifacts {
	archives jarOnlineWin
	archives jarOnlineLin
	archives jarOnlineMac
	archives jarOffline
}

launch4j {
	outfile = "SandpolisInstaller-win-${project.version}.exe"
	mainClassName = 'com.github.cilki.compact.BootProxy'
	headerType = 'gui'
	stayAlive = 'true'
	companyName = 'Subterranean Security'
	productName = 'Sandpolis Installer'
	windowTitle = 'Sandpolis Installer'
	version = "0.${SANDPOLIS_VERSION}"
	textVersion = "0.${SANDPOLIS_VERSION}"
	jar = jarOnlineWin.archivePath
	copyConfigurable = jarOnlineWin
	icon = "${projectDir}/sandpolis.ico"
}
tasks.createExe.dependsOn(jarOnlineWin)

githubRelease {
	token = GITHUB_TOKEN
	owner = 'Subterranean-Security'
	repo = 'Sandpolis'
	draft = true
	prerelease = true
	releaseAssets = {[
		project.file("build/launch4j/${launch4j.outfile}"),
		jarOnlineLin.archivePath,
		jarOnlineMac.archivePath,
		jarOffline.archivePath
	]}
}
tasks.githubRelease.dependsOn(assemble)
tasks.githubRelease.dependsOn(createExe)
