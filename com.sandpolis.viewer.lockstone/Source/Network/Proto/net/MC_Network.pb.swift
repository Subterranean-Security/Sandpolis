// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: com/sandpolis/core/proto/net/MC_Network.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///*
/// The type of SockLink.
enum Net_LinkType: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case controlTcp // = 0
  case transportTcp // = 1
  case transportUdp // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .controlTcp
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .controlTcp
    case 1: self = .transportTcp
    case 2: self = .transportUdp
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .controlTcp: return 0
    case .transportTcp: return 1
    case .transportUdp: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Net_LinkType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Net_LinkType] = [
    .controlTcp,
    .transportTcp,
    .transportUdp,
  ]
}

#endif  // swift(>=4.2)

///*
/// Request the server for a new direct connection.
struct Net_RQ_DirectConnection {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The requested node
  var cvid: Int32 = 0

  /// The type of connection
  var type: Net_LinkType = .controlTcp

  /// An optional listener port. If specified, the requested node will attempt
  /// a connection on this port. Otherwise, the server will coordinate the connection.
  var port: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

///*
/// Server response to a connection request.
struct Net_RS_DirectConnection {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The connection request
  var request: Net_RQ_Connection {
    get {return _storage._request ?? Net_RQ_Connection()}
    set {_uniqueStorage()._request = newValue}
  }
  /// Returns true if `request` has been explicitly set.
  var hasRequest: Bool {return _storage._request != nil}
  /// Clears the value of `request`. Subsequent reads from it will return its default value.
  mutating func clearRequest() {_uniqueStorage()._request = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

///*
/// Request the instance to establish a new connection.
struct Net_RQ_Connection {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The host
  var host: String = String()

  /// The port
  var port: Int32 = 0

  /// The link type
  var type: Net_LinkType = .controlTcp

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

///*
/// Indicates that a connection has been lost.
struct Net_EV_EndpointClosed {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The node that has lost connection
  var cvid: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

///*
/// Indicates that the network has been updated.
struct Net_EV_NetworkDelta {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var nodeAdded: [Net_EV_NetworkDelta.NodeAdded] = []

  var nodeRemoved: [Net_EV_NetworkDelta.NodeRemoved] = []

  var linkAdded: [Net_EV_NetworkDelta.LinkAdded] = []

  var linkRemoved: [Net_EV_NetworkDelta.LinkRemoved] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct NodeAdded {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var cvid: Int32 = 0

    var parent: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct NodeRemoved {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var cvid: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct LinkAdded {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var cvid1: Int32 = 0

    var cvid2: Int32 = 0

    var link: Net_LinkType = .controlTcp

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct LinkRemoved {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var cvid1: Int32 = 0

    var cvid2: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "net"

extension Net_LinkType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "CONTROL_TCP"),
    1: .same(proto: "TRANSPORT_TCP"),
    2: .same(proto: "TRANSPORT_UDP"),
  ]
}

extension Net_RQ_DirectConnection: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RQ_DirectConnection"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "cvid"),
    2: .same(proto: "type"),
    3: .same(proto: "port"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.cvid)
      case 2: try decoder.decodeSingularEnumField(value: &self.type)
      case 3: try decoder.decodeSingularInt32Field(value: &self.port)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.cvid != 0 {
      try visitor.visitSingularInt32Field(value: self.cvid, fieldNumber: 1)
    }
    if self.type != .controlTcp {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 2)
    }
    if self.port != 0 {
      try visitor.visitSingularInt32Field(value: self.port, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Net_RQ_DirectConnection, rhs: Net_RQ_DirectConnection) -> Bool {
    if lhs.cvid != rhs.cvid {return false}
    if lhs.type != rhs.type {return false}
    if lhs.port != rhs.port {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Net_RS_DirectConnection: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RS_DirectConnection"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "request"),
  ]

  fileprivate class _StorageClass {
    var _request: Net_RQ_Connection? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _request = source._request
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._request)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._request {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Net_RS_DirectConnection, rhs: Net_RS_DirectConnection) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._request != rhs_storage._request {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Net_RQ_Connection: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RQ_Connection"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "host"),
    2: .same(proto: "port"),
    3: .same(proto: "type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.host)
      case 2: try decoder.decodeSingularInt32Field(value: &self.port)
      case 3: try decoder.decodeSingularEnumField(value: &self.type)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.host.isEmpty {
      try visitor.visitSingularStringField(value: self.host, fieldNumber: 1)
    }
    if self.port != 0 {
      try visitor.visitSingularInt32Field(value: self.port, fieldNumber: 2)
    }
    if self.type != .controlTcp {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Net_RQ_Connection, rhs: Net_RQ_Connection) -> Bool {
    if lhs.host != rhs.host {return false}
    if lhs.port != rhs.port {return false}
    if lhs.type != rhs.type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Net_EV_EndpointClosed: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EV_EndpointClosed"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "cvid"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.cvid)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.cvid != 0 {
      try visitor.visitSingularInt32Field(value: self.cvid, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Net_EV_EndpointClosed, rhs: Net_EV_EndpointClosed) -> Bool {
    if lhs.cvid != rhs.cvid {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Net_EV_NetworkDelta: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EV_NetworkDelta"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "node_added"),
    2: .standard(proto: "node_removed"),
    3: .standard(proto: "link_added"),
    4: .standard(proto: "link_removed"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.nodeAdded)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.nodeRemoved)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.linkAdded)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.linkRemoved)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.nodeAdded.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.nodeAdded, fieldNumber: 1)
    }
    if !self.nodeRemoved.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.nodeRemoved, fieldNumber: 2)
    }
    if !self.linkAdded.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.linkAdded, fieldNumber: 3)
    }
    if !self.linkRemoved.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.linkRemoved, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Net_EV_NetworkDelta, rhs: Net_EV_NetworkDelta) -> Bool {
    if lhs.nodeAdded != rhs.nodeAdded {return false}
    if lhs.nodeRemoved != rhs.nodeRemoved {return false}
    if lhs.linkAdded != rhs.linkAdded {return false}
    if lhs.linkRemoved != rhs.linkRemoved {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Net_EV_NetworkDelta.NodeAdded: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Net_EV_NetworkDelta.protoMessageName + ".NodeAdded"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "cvid"),
    2: .same(proto: "parent"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.cvid)
      case 2: try decoder.decodeSingularInt32Field(value: &self.parent)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.cvid != 0 {
      try visitor.visitSingularInt32Field(value: self.cvid, fieldNumber: 1)
    }
    if self.parent != 0 {
      try visitor.visitSingularInt32Field(value: self.parent, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Net_EV_NetworkDelta.NodeAdded, rhs: Net_EV_NetworkDelta.NodeAdded) -> Bool {
    if lhs.cvid != rhs.cvid {return false}
    if lhs.parent != rhs.parent {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Net_EV_NetworkDelta.NodeRemoved: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Net_EV_NetworkDelta.protoMessageName + ".NodeRemoved"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "cvid"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.cvid)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.cvid != 0 {
      try visitor.visitSingularInt32Field(value: self.cvid, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Net_EV_NetworkDelta.NodeRemoved, rhs: Net_EV_NetworkDelta.NodeRemoved) -> Bool {
    if lhs.cvid != rhs.cvid {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Net_EV_NetworkDelta.LinkAdded: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Net_EV_NetworkDelta.protoMessageName + ".LinkAdded"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "cvid1"),
    2: .same(proto: "cvid2"),
    3: .same(proto: "link"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.cvid1)
      case 2: try decoder.decodeSingularInt32Field(value: &self.cvid2)
      case 3: try decoder.decodeSingularEnumField(value: &self.link)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.cvid1 != 0 {
      try visitor.visitSingularInt32Field(value: self.cvid1, fieldNumber: 1)
    }
    if self.cvid2 != 0 {
      try visitor.visitSingularInt32Field(value: self.cvid2, fieldNumber: 2)
    }
    if self.link != .controlTcp {
      try visitor.visitSingularEnumField(value: self.link, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Net_EV_NetworkDelta.LinkAdded, rhs: Net_EV_NetworkDelta.LinkAdded) -> Bool {
    if lhs.cvid1 != rhs.cvid1 {return false}
    if lhs.cvid2 != rhs.cvid2 {return false}
    if lhs.link != rhs.link {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Net_EV_NetworkDelta.LinkRemoved: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Net_EV_NetworkDelta.protoMessageName + ".LinkRemoved"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "cvid1"),
    2: .same(proto: "cvid2"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.cvid1)
      case 2: try decoder.decodeSingularInt32Field(value: &self.cvid2)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.cvid1 != 0 {
      try visitor.visitSingularInt32Field(value: self.cvid1, fieldNumber: 1)
    }
    if self.cvid2 != 0 {
      try visitor.visitSingularInt32Field(value: self.cvid2, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Net_EV_NetworkDelta.LinkRemoved, rhs: Net_EV_NetworkDelta.LinkRemoved) -> Bool {
    if lhs.cvid1 != rhs.cvid1 {return false}
    if lhs.cvid2 != rhs.cvid2 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
