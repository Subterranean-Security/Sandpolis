// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: com/sandpolis/core/proto/net/MC_Client.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///*
/// Request client metadata.
struct Net_RQ_ClientMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Net_RS_ClientMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The client's network hostname
  var hostname: String = String()

  /// The client user 
  var username: String = String()

  /// The OS family
  var osType: Util_OsType = .linux

  /// The system architecture
  var arch: Util_Architecture = .x86

  /// The OS version
  var osVersion: String = String()

  /// The TimeZone identifier
  var timezone: String = String()

  /// The JVM start time
  var startTimestamp: Int64 = 0

  /// Temporary:
  var upload: Int64 = 0

  var download: Int64 = 0

  var userhome: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Net_RQ_PowerChange {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var change: Net_RQ_PowerChange.PowerChange = .poweroff

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum PowerChange: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case poweroff // = 0
    case restart // = 1
    case UNRECOGNIZED(Int)

    init() {
      self = .poweroff
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .poweroff
      case 1: self = .restart
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .poweroff: return 0
      case .restart: return 1
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}
}

#if swift(>=4.2)

extension Net_RQ_PowerChange.PowerChange: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Net_RQ_PowerChange.PowerChange] = [
    .poweroff,
    .restart,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "net"

extension Net_RQ_ClientMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RQ_ClientMetadata"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Net_RQ_ClientMetadata, rhs: Net_RQ_ClientMetadata) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Net_RS_ClientMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RS_ClientMetadata"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "hostname"),
    2: .same(proto: "username"),
    3: .standard(proto: "os_type"),
    4: .same(proto: "arch"),
    5: .standard(proto: "os_version"),
    6: .same(proto: "timezone"),
    7: .standard(proto: "start_timestamp"),
    8: .same(proto: "upload"),
    9: .same(proto: "download"),
    10: .same(proto: "userhome"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.hostname)
      case 2: try decoder.decodeSingularStringField(value: &self.username)
      case 3: try decoder.decodeSingularEnumField(value: &self.osType)
      case 4: try decoder.decodeSingularEnumField(value: &self.arch)
      case 5: try decoder.decodeSingularStringField(value: &self.osVersion)
      case 6: try decoder.decodeSingularStringField(value: &self.timezone)
      case 7: try decoder.decodeSingularInt64Field(value: &self.startTimestamp)
      case 8: try decoder.decodeSingularInt64Field(value: &self.upload)
      case 9: try decoder.decodeSingularInt64Field(value: &self.download)
      case 10: try decoder.decodeSingularStringField(value: &self.userhome)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.hostname.isEmpty {
      try visitor.visitSingularStringField(value: self.hostname, fieldNumber: 1)
    }
    if !self.username.isEmpty {
      try visitor.visitSingularStringField(value: self.username, fieldNumber: 2)
    }
    if self.osType != .linux {
      try visitor.visitSingularEnumField(value: self.osType, fieldNumber: 3)
    }
    if self.arch != .x86 {
      try visitor.visitSingularEnumField(value: self.arch, fieldNumber: 4)
    }
    if !self.osVersion.isEmpty {
      try visitor.visitSingularStringField(value: self.osVersion, fieldNumber: 5)
    }
    if !self.timezone.isEmpty {
      try visitor.visitSingularStringField(value: self.timezone, fieldNumber: 6)
    }
    if self.startTimestamp != 0 {
      try visitor.visitSingularInt64Field(value: self.startTimestamp, fieldNumber: 7)
    }
    if self.upload != 0 {
      try visitor.visitSingularInt64Field(value: self.upload, fieldNumber: 8)
    }
    if self.download != 0 {
      try visitor.visitSingularInt64Field(value: self.download, fieldNumber: 9)
    }
    if !self.userhome.isEmpty {
      try visitor.visitSingularStringField(value: self.userhome, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Net_RS_ClientMetadata, rhs: Net_RS_ClientMetadata) -> Bool {
    if lhs.hostname != rhs.hostname {return false}
    if lhs.username != rhs.username {return false}
    if lhs.osType != rhs.osType {return false}
    if lhs.arch != rhs.arch {return false}
    if lhs.osVersion != rhs.osVersion {return false}
    if lhs.timezone != rhs.timezone {return false}
    if lhs.startTimestamp != rhs.startTimestamp {return false}
    if lhs.upload != rhs.upload {return false}
    if lhs.download != rhs.download {return false}
    if lhs.userhome != rhs.userhome {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Net_RQ_PowerChange: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RQ_PowerChange"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "change"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.change)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.change != .poweroff {
      try visitor.visitSingularEnumField(value: self.change, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Net_RQ_PowerChange, rhs: Net_RQ_PowerChange) -> Bool {
    if lhs.change != rhs.change {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Net_RQ_PowerChange.PowerChange: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "POWEROFF"),
    1: .same(proto: "RESTART"),
  ]
}
