//****************************************************************************//
//                                                                            //
//                Copyright Â© 2015 - 2019 Subterranean Security               //
//                                                                            //
//  Licensed under the Apache License, Version 2.0 (the "License");           //
//  you may not use this file except in compliance with the License.          //
//  You may obtain a copy of the License at                                   //
//                                                                            //
//      http://www.apache.org/licenses/LICENSE-2.0                            //
//                                                                            //
//  Unless required by applicable law or agreed to in writing, software       //
//  distributed under the License is distributed on an "AS IS" BASIS,         //
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  //
//  See the License for the specific language governing permissions and       //
//  limitations under the License.                                            //
//                                                                            //
//****************************************************************************//
import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///*
/// A message type for typical communication among instances.
///
/// Message prefixes:
///  RQ_*    Request message
///  RS_*    Response message
///  EV_*    Asynchronous event
///
/// Message category naming conventions:
///  MC_*    Message category
struct Net_Message {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The final destination CVID
  var to: Int32 {
    get {return _storage._to}
    set {_uniqueStorage()._to = newValue}
  }

  /// The original source CVID
  var from: Int32 {
    get {return _storage._from}
    set {_uniqueStorage()._from = newValue}
  }

  /// The response ID
  var id: Int32 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  var msgOneof: OneOf_MsgOneof? {
    get {return _storage._msgOneof}
    set {_uniqueStorage()._msgOneof = newValue}
  }

  /// A plugin message
  var plugin: SwiftProtobuf.Google_Protobuf_Any {
    get {
      if case .plugin(let v)? = _storage._msgOneof {return v}
      return SwiftProtobuf.Google_Protobuf_Any()
    }
    set {_uniqueStorage()._msgOneof = .plugin(newValue)}
  }

  /// Stream data
  var evStreamData: Net_EV_StreamData {
    get {
      if case .evStreamData(let v)? = _storage._msgOneof {return v}
      return Net_EV_StreamData()
    }
    set {_uniqueStorage()._msgOneof = .evStreamData(newValue)}
  }

  /// A generic response indicating the outcome of some operation
  var rsOutcome: Util_Outcome {
    get {
      if case .rsOutcome(let v)? = _storage._msgOneof {return v}
      return Util_Outcome()
    }
    set {_uniqueStorage()._msgOneof = .rsOutcome(newValue)}
  }

  /// MC_Auth
  var rqNoAuth: Net_RQ_NoAuth {
    get {
      if case .rqNoAuth(let v)? = _storage._msgOneof {return v}
      return Net_RQ_NoAuth()
    }
    set {_uniqueStorage()._msgOneof = .rqNoAuth(newValue)}
  }

  var rqPasswordAuth: Net_RQ_PasswordAuth {
    get {
      if case .rqPasswordAuth(let v)? = _storage._msgOneof {return v}
      return Net_RQ_PasswordAuth()
    }
    set {_uniqueStorage()._msgOneof = .rqPasswordAuth(newValue)}
  }

  var rqKeyAuth: Net_RQ_KeyAuth {
    get {
      if case .rqKeyAuth(let v)? = _storage._msgOneof {return v}
      return Net_RQ_KeyAuth()
    }
    set {_uniqueStorage()._msgOneof = .rqKeyAuth(newValue)}
  }

  /// MC_Cvid
  var rqCvid: Net_RQ_Cvid {
    get {
      if case .rqCvid(let v)? = _storage._msgOneof {return v}
      return Net_RQ_Cvid()
    }
    set {_uniqueStorage()._msgOneof = .rqCvid(newValue)}
  }

  var rsCvid: Net_RS_Cvid {
    get {
      if case .rsCvid(let v)? = _storage._msgOneof {return v}
      return Net_RS_Cvid()
    }
    set {_uniqueStorage()._msgOneof = .rsCvid(newValue)}
  }

  /// MC_Delta
  var rqProfileDelta: Net_RQ_ProfileDelta {
    get {
      if case .rqProfileDelta(let v)? = _storage._msgOneof {return v}
      return Net_RQ_ProfileDelta()
    }
    set {_uniqueStorage()._msgOneof = .rqProfileDelta(newValue)}
  }

  var rsProfileDelta: Net_RS_ProfileDelta {
    get {
      if case .rsProfileDelta(let v)? = _storage._msgOneof {return v}
      return Net_RS_ProfileDelta()
    }
    set {_uniqueStorage()._msgOneof = .rsProfileDelta(newValue)}
  }

  var evProfileDelta: Net_EV_ProfileDelta {
    get {
      if case .evProfileDelta(let v)? = _storage._msgOneof {return v}
      return Net_EV_ProfileDelta()
    }
    set {_uniqueStorage()._msgOneof = .evProfileDelta(newValue)}
  }

  var evPermissionDelta: Net_EV_PermissionDelta {
    get {
      if case .evPermissionDelta(let v)? = _storage._msgOneof {return v}
      return Net_EV_PermissionDelta()
    }
    set {_uniqueStorage()._msgOneof = .evPermissionDelta(newValue)}
  }

  /// MC_Generator
  var rqGenerate: Net_RQ_Generate {
    get {
      if case .rqGenerate(let v)? = _storage._msgOneof {return v}
      return Net_RQ_Generate()
    }
    set {_uniqueStorage()._msgOneof = .rqGenerate(newValue)}
  }

  var rsGenerate: Net_RS_Generate {
    get {
      if case .rsGenerate(let v)? = _storage._msgOneof {return v}
      return Net_RS_Generate()
    }
    set {_uniqueStorage()._msgOneof = .rsGenerate(newValue)}
  }

  /// MC_Group
  var rqAddGroup: Net_RQ_AddGroup {
    get {
      if case .rqAddGroup(let v)? = _storage._msgOneof {return v}
      return Net_RQ_AddGroup()
    }
    set {_uniqueStorage()._msgOneof = .rqAddGroup(newValue)}
  }

  var rqRemoveGroup: Net_RQ_RemoveGroup {
    get {
      if case .rqRemoveGroup(let v)? = _storage._msgOneof {return v}
      return Net_RQ_RemoveGroup()
    }
    set {_uniqueStorage()._msgOneof = .rqRemoveGroup(newValue)}
  }

  var rqListGroups: Net_RQ_ListGroups {
    get {
      if case .rqListGroups(let v)? = _storage._msgOneof {return v}
      return Net_RQ_ListGroups()
    }
    set {_uniqueStorage()._msgOneof = .rqListGroups(newValue)}
  }

  var rsListGroups: Net_RS_ListGroups {
    get {
      if case .rsListGroups(let v)? = _storage._msgOneof {return v}
      return Net_RS_ListGroups()
    }
    set {_uniqueStorage()._msgOneof = .rsListGroups(newValue)}
  }

  var rqGroupDelta: Net_RQ_GroupDelta {
    get {
      if case .rqGroupDelta(let v)? = _storage._msgOneof {return v}
      return Net_RQ_GroupDelta()
    }
    set {_uniqueStorage()._msgOneof = .rqGroupDelta(newValue)}
  }

  /// MC_Listener
  var rqAddListener: Net_RQ_AddListener {
    get {
      if case .rqAddListener(let v)? = _storage._msgOneof {return v}
      return Net_RQ_AddListener()
    }
    set {_uniqueStorage()._msgOneof = .rqAddListener(newValue)}
  }

  var rqRemoveListener: Net_RQ_RemoveListener {
    get {
      if case .rqRemoveListener(let v)? = _storage._msgOneof {return v}
      return Net_RQ_RemoveListener()
    }
    set {_uniqueStorage()._msgOneof = .rqRemoveListener(newValue)}
  }

  var rqListenerDelta: Net_RQ_ListenerDelta {
    get {
      if case .rqListenerDelta(let v)? = _storage._msgOneof {return v}
      return Net_RQ_ListenerDelta()
    }
    set {_uniqueStorage()._msgOneof = .rqListenerDelta(newValue)}
  }

  var rqChangeListener: Net_RQ_ChangeListener {
    get {
      if case .rqChangeListener(let v)? = _storage._msgOneof {return v}
      return Net_RQ_ChangeListener()
    }
    set {_uniqueStorage()._msgOneof = .rqChangeListener(newValue)}
  }

  /// MC_Login
  var rqLogin: Net_RQ_Login {
    get {
      if case .rqLogin(let v)? = _storage._msgOneof {return v}
      return Net_RQ_Login()
    }
    set {_uniqueStorage()._msgOneof = .rqLogin(newValue)}
  }

  var rqLogout: Net_RQ_Logout {
    get {
      if case .rqLogout(let v)? = _storage._msgOneof {return v}
      return Net_RQ_Logout()
    }
    set {_uniqueStorage()._msgOneof = .rqLogout(newValue)}
  }

  /// MC_Network
  var evEndpointClosed: Net_EV_EndpointClosed {
    get {
      if case .evEndpointClosed(let v)? = _storage._msgOneof {return v}
      return Net_EV_EndpointClosed()
    }
    set {_uniqueStorage()._msgOneof = .evEndpointClosed(newValue)}
  }

  var evNetworkDelta: Net_EV_NetworkDelta {
    get {
      if case .evNetworkDelta(let v)? = _storage._msgOneof {return v}
      return Net_EV_NetworkDelta()
    }
    set {_uniqueStorage()._msgOneof = .evNetworkDelta(newValue)}
  }

  var rqDirectConnection: Net_RQ_DirectConnection {
    get {
      if case .rqDirectConnection(let v)? = _storage._msgOneof {return v}
      return Net_RQ_DirectConnection()
    }
    set {_uniqueStorage()._msgOneof = .rqDirectConnection(newValue)}
  }

  var rsDirectConnection: Net_RS_DirectConnection {
    get {
      if case .rsDirectConnection(let v)? = _storage._msgOneof {return v}
      return Net_RS_DirectConnection()
    }
    set {_uniqueStorage()._msgOneof = .rsDirectConnection(newValue)}
  }

  var rqConnection: Net_RQ_Connection {
    get {
      if case .rqConnection(let v)? = _storage._msgOneof {return v}
      return Net_RQ_Connection()
    }
    set {_uniqueStorage()._msgOneof = .rqConnection(newValue)}
  }

  /// MC_Ping
  var rqPing: Net_RQ_Ping {
    get {
      if case .rqPing(let v)? = _storage._msgOneof {return v}
      return Net_RQ_Ping()
    }
    set {_uniqueStorage()._msgOneof = .rqPing(newValue)}
  }

  var rsPing: Net_RS_Ping {
    get {
      if case .rsPing(let v)? = _storage._msgOneof {return v}
      return Net_RS_Ping()
    }
    set {_uniqueStorage()._msgOneof = .rsPing(newValue)}
  }

  /// MC_Plugin
  var rqArtifactDownload: Net_RQ_ArtifactDownload {
    get {
      if case .rqArtifactDownload(let v)? = _storage._msgOneof {return v}
      return Net_RQ_ArtifactDownload()
    }
    set {_uniqueStorage()._msgOneof = .rqArtifactDownload(newValue)}
  }

  var rsArtifactDownload: Net_RS_ArtifactDownload {
    get {
      if case .rsArtifactDownload(let v)? = _storage._msgOneof {return v}
      return Net_RS_ArtifactDownload()
    }
    set {_uniqueStorage()._msgOneof = .rsArtifactDownload(newValue)}
  }

  var rqPluginInstall: Net_RQ_PluginInstall {
    get {
      if case .rqPluginInstall(let v)? = _storage._msgOneof {return v}
      return Net_RQ_PluginInstall()
    }
    set {_uniqueStorage()._msgOneof = .rqPluginInstall(newValue)}
  }

  var rqPluginList: Net_RQ_PluginList {
    get {
      if case .rqPluginList(let v)? = _storage._msgOneof {return v}
      return Net_RQ_PluginList()
    }
    set {_uniqueStorage()._msgOneof = .rqPluginList(newValue)}
  }

  var rsPluginList: Net_RS_PluginList {
    get {
      if case .rsPluginList(let v)? = _storage._msgOneof {return v}
      return Net_RS_PluginList()
    }
    set {_uniqueStorage()._msgOneof = .rsPluginList(newValue)}
  }

  /// MC_Server
  var rqServerBanner: Net_RQ_ServerBanner {
    get {
      if case .rqServerBanner(let v)? = _storage._msgOneof {return v}
      return Net_RQ_ServerBanner()
    }
    set {_uniqueStorage()._msgOneof = .rqServerBanner(newValue)}
  }

  var rsServerBanner: Net_RS_ServerBanner {
    get {
      if case .rsServerBanner(let v)? = _storage._msgOneof {return v}
      return Net_RS_ServerBanner()
    }
    set {_uniqueStorage()._msgOneof = .rsServerBanner(newValue)}
  }

  /// MC_Stream
  var rqStreamStart: Net_RQ_StreamStart {
    get {
      if case .rqStreamStart(let v)? = _storage._msgOneof {return v}
      return Net_RQ_StreamStart()
    }
    set {_uniqueStorage()._msgOneof = .rqStreamStart(newValue)}
  }

  var rsStreamStart: Net_RS_StreamStart {
    get {
      if case .rsStreamStart(let v)? = _storage._msgOneof {return v}
      return Net_RS_StreamStart()
    }
    set {_uniqueStorage()._msgOneof = .rsStreamStart(newValue)}
  }

  var rqStreamStop: Net_RQ_StreamStop {
    get {
      if case .rqStreamStop(let v)? = _storage._msgOneof {return v}
      return Net_RQ_StreamStop()
    }
    set {_uniqueStorage()._msgOneof = .rqStreamStop(newValue)}
  }

  /// MC_User
  var rqAddUser: Net_RQ_AddUser {
    get {
      if case .rqAddUser(let v)? = _storage._msgOneof {return v}
      return Net_RQ_AddUser()
    }
    set {_uniqueStorage()._msgOneof = .rqAddUser(newValue)}
  }

  var rqRemoveUser: Net_RQ_RemoveUser {
    get {
      if case .rqRemoveUser(let v)? = _storage._msgOneof {return v}
      return Net_RQ_RemoveUser()
    }
    set {_uniqueStorage()._msgOneof = .rqRemoveUser(newValue)}
  }

  var rqUserDelta: Net_RQ_UserDelta {
    get {
      if case .rqUserDelta(let v)? = _storage._msgOneof {return v}
      return Net_RQ_UserDelta()
    }
    set {_uniqueStorage()._msgOneof = .rqUserDelta(newValue)}
  }

  /// MC_Client
  var rqClientMetadata: Net_RQ_ClientMetadata {
    get {
      if case .rqClientMetadata(let v)? = _storage._msgOneof {return v}
      return Net_RQ_ClientMetadata()
    }
    set {_uniqueStorage()._msgOneof = .rqClientMetadata(newValue)}
  }

  var rsClientMetadata: Net_RS_ClientMetadata {
    get {
      if case .rsClientMetadata(let v)? = _storage._msgOneof {return v}
      return Net_RS_ClientMetadata()
    }
    set {_uniqueStorage()._msgOneof = .rsClientMetadata(newValue)}
  }

  var rqPowerChange: Net_RQ_PowerChange {
    get {
      if case .rqPowerChange(let v)? = _storage._msgOneof {return v}
      return Net_RQ_PowerChange()
    }
    set {_uniqueStorage()._msgOneof = .rqPowerChange(newValue)}
  }

  /// Temporary:
  var rqScreenshot: Net_RQ_Screenshot {
    get {
      if case .rqScreenshot(let v)? = _storage._msgOneof {return v}
      return Net_RQ_Screenshot()
    }
    set {_uniqueStorage()._msgOneof = .rqScreenshot(newValue)}
  }

  var rsScreenshot: Net_RS_Screenshot {
    get {
      if case .rsScreenshot(let v)? = _storage._msgOneof {return v}
      return Net_RS_Screenshot()
    }
    set {_uniqueStorage()._msgOneof = .rsScreenshot(newValue)}
  }

  var rqFileDelete: Net_RQ_FileDelete {
    get {
      if case .rqFileDelete(let v)? = _storage._msgOneof {return v}
      return Net_RQ_FileDelete()
    }
    set {_uniqueStorage()._msgOneof = .rqFileDelete(newValue)}
  }

  var rqFileListing: Net_RQ_FileListing {
    get {
      if case .rqFileListing(let v)? = _storage._msgOneof {return v}
      return Net_RQ_FileListing()
    }
    set {_uniqueStorage()._msgOneof = .rqFileListing(newValue)}
  }

  var rsFileListing: Net_RS_FileListing {
    get {
      if case .rsFileListing(let v)? = _storage._msgOneof {return v}
      return Net_RS_FileListing()
    }
    set {_uniqueStorage()._msgOneof = .rsFileListing(newValue)}
  }

  var rqExecute: Net_RQ_Execute {
    get {
      if case .rqExecute(let v)? = _storage._msgOneof {return v}
      return Net_RQ_Execute()
    }
    set {_uniqueStorage()._msgOneof = .rqExecute(newValue)}
  }

  var rsExecute: Net_RS_Execute {
    get {
      if case .rsExecute(let v)? = _storage._msgOneof {return v}
      return Net_RS_Execute()
    }
    set {_uniqueStorage()._msgOneof = .rsExecute(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_MsgOneof: Equatable {
    /// A plugin message
    case plugin(SwiftProtobuf.Google_Protobuf_Any)
    /// Stream data
    case evStreamData(Net_EV_StreamData)
    /// A generic response indicating the outcome of some operation
    case rsOutcome(Util_Outcome)
    /// MC_Auth
    case rqNoAuth(Net_RQ_NoAuth)
    case rqPasswordAuth(Net_RQ_PasswordAuth)
    case rqKeyAuth(Net_RQ_KeyAuth)
    /// MC_Cvid
    case rqCvid(Net_RQ_Cvid)
    case rsCvid(Net_RS_Cvid)
    /// MC_Delta
    case rqProfileDelta(Net_RQ_ProfileDelta)
    case rsProfileDelta(Net_RS_ProfileDelta)
    case evProfileDelta(Net_EV_ProfileDelta)
    case evPermissionDelta(Net_EV_PermissionDelta)
    /// MC_Generator
    case rqGenerate(Net_RQ_Generate)
    case rsGenerate(Net_RS_Generate)
    /// MC_Group
    case rqAddGroup(Net_RQ_AddGroup)
    case rqRemoveGroup(Net_RQ_RemoveGroup)
    case rqListGroups(Net_RQ_ListGroups)
    case rsListGroups(Net_RS_ListGroups)
    case rqGroupDelta(Net_RQ_GroupDelta)
    /// MC_Listener
    case rqAddListener(Net_RQ_AddListener)
    case rqRemoveListener(Net_RQ_RemoveListener)
    case rqListenerDelta(Net_RQ_ListenerDelta)
    case rqChangeListener(Net_RQ_ChangeListener)
    /// MC_Login
    case rqLogin(Net_RQ_Login)
    case rqLogout(Net_RQ_Logout)
    /// MC_Network
    case evEndpointClosed(Net_EV_EndpointClosed)
    case evNetworkDelta(Net_EV_NetworkDelta)
    case rqDirectConnection(Net_RQ_DirectConnection)
    case rsDirectConnection(Net_RS_DirectConnection)
    case rqConnection(Net_RQ_Connection)
    /// MC_Ping
    case rqPing(Net_RQ_Ping)
    case rsPing(Net_RS_Ping)
    /// MC_Plugin
    case rqArtifactDownload(Net_RQ_ArtifactDownload)
    case rsArtifactDownload(Net_RS_ArtifactDownload)
    case rqPluginInstall(Net_RQ_PluginInstall)
    case rqPluginList(Net_RQ_PluginList)
    case rsPluginList(Net_RS_PluginList)
    /// MC_Server
    case rqServerBanner(Net_RQ_ServerBanner)
    case rsServerBanner(Net_RS_ServerBanner)
    /// MC_Stream
    case rqStreamStart(Net_RQ_StreamStart)
    case rsStreamStart(Net_RS_StreamStart)
    case rqStreamStop(Net_RQ_StreamStop)
    /// MC_User
    case rqAddUser(Net_RQ_AddUser)
    case rqRemoveUser(Net_RQ_RemoveUser)
    case rqUserDelta(Net_RQ_UserDelta)
    /// MC_Client
    case rqClientMetadata(Net_RQ_ClientMetadata)
    case rsClientMetadata(Net_RS_ClientMetadata)
    case rqPowerChange(Net_RQ_PowerChange)
    /// Temporary:
    case rqScreenshot(Net_RQ_Screenshot)
    case rsScreenshot(Net_RS_Screenshot)
    case rqFileDelete(Net_RQ_FileDelete)
    case rqFileListing(Net_RQ_FileListing)
    case rsFileListing(Net_RS_FileListing)
    case rqExecute(Net_RQ_Execute)
    case rsExecute(Net_RS_Execute)

  #if !swift(>=4.1)
    static func ==(lhs: Net_Message.OneOf_MsgOneof, rhs: Net_Message.OneOf_MsgOneof) -> Bool {
      switch (lhs, rhs) {
      case (.plugin(let l), .plugin(let r)): return l == r
      case (.evStreamData(let l), .evStreamData(let r)): return l == r
      case (.rsOutcome(let l), .rsOutcome(let r)): return l == r
      case (.rqNoAuth(let l), .rqNoAuth(let r)): return l == r
      case (.rqPasswordAuth(let l), .rqPasswordAuth(let r)): return l == r
      case (.rqKeyAuth(let l), .rqKeyAuth(let r)): return l == r
      case (.rqCvid(let l), .rqCvid(let r)): return l == r
      case (.rsCvid(let l), .rsCvid(let r)): return l == r
      case (.rqProfileDelta(let l), .rqProfileDelta(let r)): return l == r
      case (.rsProfileDelta(let l), .rsProfileDelta(let r)): return l == r
      case (.evProfileDelta(let l), .evProfileDelta(let r)): return l == r
      case (.evPermissionDelta(let l), .evPermissionDelta(let r)): return l == r
      case (.rqGenerate(let l), .rqGenerate(let r)): return l == r
      case (.rsGenerate(let l), .rsGenerate(let r)): return l == r
      case (.rqAddGroup(let l), .rqAddGroup(let r)): return l == r
      case (.rqRemoveGroup(let l), .rqRemoveGroup(let r)): return l == r
      case (.rqListGroups(let l), .rqListGroups(let r)): return l == r
      case (.rsListGroups(let l), .rsListGroups(let r)): return l == r
      case (.rqGroupDelta(let l), .rqGroupDelta(let r)): return l == r
      case (.rqAddListener(let l), .rqAddListener(let r)): return l == r
      case (.rqRemoveListener(let l), .rqRemoveListener(let r)): return l == r
      case (.rqListenerDelta(let l), .rqListenerDelta(let r)): return l == r
      case (.rqChangeListener(let l), .rqChangeListener(let r)): return l == r
      case (.rqLogin(let l), .rqLogin(let r)): return l == r
      case (.rqLogout(let l), .rqLogout(let r)): return l == r
      case (.evEndpointClosed(let l), .evEndpointClosed(let r)): return l == r
      case (.evNetworkDelta(let l), .evNetworkDelta(let r)): return l == r
      case (.rqDirectConnection(let l), .rqDirectConnection(let r)): return l == r
      case (.rsDirectConnection(let l), .rsDirectConnection(let r)): return l == r
      case (.rqConnection(let l), .rqConnection(let r)): return l == r
      case (.rqPing(let l), .rqPing(let r)): return l == r
      case (.rsPing(let l), .rsPing(let r)): return l == r
      case (.rqArtifactDownload(let l), .rqArtifactDownload(let r)): return l == r
      case (.rsArtifactDownload(let l), .rsArtifactDownload(let r)): return l == r
      case (.rqPluginInstall(let l), .rqPluginInstall(let r)): return l == r
      case (.rqPluginList(let l), .rqPluginList(let r)): return l == r
      case (.rsPluginList(let l), .rsPluginList(let r)): return l == r
      case (.rqServerBanner(let l), .rqServerBanner(let r)): return l == r
      case (.rsServerBanner(let l), .rsServerBanner(let r)): return l == r
      case (.rqStreamStart(let l), .rqStreamStart(let r)): return l == r
      case (.rsStreamStart(let l), .rsStreamStart(let r)): return l == r
      case (.rqStreamStop(let l), .rqStreamStop(let r)): return l == r
      case (.rqAddUser(let l), .rqAddUser(let r)): return l == r
      case (.rqRemoveUser(let l), .rqRemoveUser(let r)): return l == r
      case (.rqUserDelta(let l), .rqUserDelta(let r)): return l == r
      case (.rqClientMetadata(let l), .rqClientMetadata(let r)): return l == r
      case (.rsClientMetadata(let l), .rsClientMetadata(let r)): return l == r
      case (.rqPowerChange(let l), .rqPowerChange(let r)): return l == r
      case (.rqScreenshot(let l), .rqScreenshot(let r)): return l == r
      case (.rsScreenshot(let l), .rsScreenshot(let r)): return l == r
      case (.rqFileDelete(let l), .rqFileDelete(let r)): return l == r
      case (.rqFileListing(let l), .rqFileListing(let r)): return l == r
      case (.rsFileListing(let l), .rsFileListing(let r)): return l == r
      case (.rqExecute(let l), .rqExecute(let r)): return l == r
      case (.rsExecute(let l), .rsExecute(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "net"

extension Net_Message: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Message"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "to"),
    2: .same(proto: "from"),
    3: .same(proto: "id"),
    4: .same(proto: "plugin"),
    5: .standard(proto: "ev_stream_data"),
    6: .standard(proto: "rs_outcome"),
    7: .standard(proto: "rq_no_auth"),
    8: .standard(proto: "rq_password_auth"),
    9: .standard(proto: "rq_key_auth"),
    100: .standard(proto: "rq_cvid"),
    101: .standard(proto: "rs_cvid"),
    10: .standard(proto: "rq_profile_delta"),
    1010: .standard(proto: "rs_profile_delta"),
    11: .standard(proto: "ev_profile_delta"),
    12: .standard(proto: "ev_permission_delta"),
    13: .standard(proto: "rq_generate"),
    1013: .standard(proto: "rs_generate"),
    14: .standard(proto: "rq_add_group"),
    15: .standard(proto: "rq_remove_group"),
    16: .standard(proto: "rq_list_groups"),
    1016: .standard(proto: "rs_list_groups"),
    17: .standard(proto: "rq_group_delta"),
    18: .standard(proto: "rq_add_listener"),
    19: .standard(proto: "rq_remove_listener"),
    20: .standard(proto: "rq_listener_delta"),
    21: .standard(proto: "rq_change_listener"),
    22: .standard(proto: "rq_login"),
    1022: .standard(proto: "rq_logout"),
    23: .standard(proto: "ev_endpoint_closed"),
    24: .standard(proto: "ev_network_delta"),
    25: .standard(proto: "rq_direct_connection"),
    1025: .standard(proto: "rs_direct_connection"),
    26: .standard(proto: "rq_connection"),
    27: .standard(proto: "rq_ping"),
    1027: .standard(proto: "rs_ping"),
    28: .standard(proto: "rq_artifact_download"),
    1028: .standard(proto: "rs_artifact_download"),
    29: .standard(proto: "rq_plugin_install"),
    30: .standard(proto: "rq_plugin_list"),
    1030: .standard(proto: "rs_plugin_list"),
    31: .standard(proto: "rq_server_banner"),
    1031: .standard(proto: "rs_server_banner"),
    32: .standard(proto: "rq_stream_start"),
    1032: .standard(proto: "rs_stream_start"),
    33: .standard(proto: "rq_stream_stop"),
    34: .standard(proto: "rq_add_user"),
    35: .standard(proto: "rq_remove_user"),
    36: .standard(proto: "rq_user_delta"),
    37: .standard(proto: "rq_client_metadata"),
    1037: .standard(proto: "rs_client_metadata"),
    38: .standard(proto: "rq_power_change"),
    40: .standard(proto: "rq_screenshot"),
    1040: .standard(proto: "rs_screenshot"),
    42: .standard(proto: "rq_file_delete"),
    43: .standard(proto: "rq_file_listing"),
    1043: .standard(proto: "rs_file_listing"),
    44: .standard(proto: "rq_execute"),
    1044: .standard(proto: "rs_execute"),
  ]

  fileprivate class _StorageClass {
    var _to: Int32 = 0
    var _from: Int32 = 0
    var _id: Int32 = 0
    var _msgOneof: Net_Message.OneOf_MsgOneof?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _to = source._to
      _from = source._from
      _id = source._id
      _msgOneof = source._msgOneof
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._to)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._from)
        case 3: try decoder.decodeSingularInt32Field(value: &_storage._id)
        case 4:
          var v: SwiftProtobuf.Google_Protobuf_Any?
          if let current = _storage._msgOneof {
            try decoder.handleConflictingOneOf()
            if case .plugin(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._msgOneof = .plugin(v)}
        case 5:
          var v: Net_EV_StreamData?
          if let current = _storage._msgOneof {
            try decoder.handleConflictingOneOf()
            if case .evStreamData(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._msgOneof = .evStreamData(v)}
        case 6:
          var v: Util_Outcome?
          if let current = _storage._msgOneof {
            try decoder.handleConflictingOneOf()
            if case .rsOutcome(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._msgOneof = .rsOutcome(v)}
        case 7:
          var v: Net_RQ_NoAuth?
          if let current = _storage._msgOneof {
            try decoder.handleConflictingOneOf()
            if case .rqNoAuth(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._msgOneof = .rqNoAuth(v)}
        case 8:
          var v: Net_RQ_PasswordAuth?
          if let current = _storage._msgOneof {
            try decoder.handleConflictingOneOf()
            if case .rqPasswordAuth(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._msgOneof = .rqPasswordAuth(v)}
        case 9:
          var v: Net_RQ_KeyAuth?
          if let current = _storage._msgOneof {
            try decoder.handleConflictingOneOf()
            if case .rqKeyAuth(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._msgOneof = .rqKeyAuth(v)}
        case 10:
          var v: Net_RQ_ProfileDelta?
          if let current = _storage._msgOneof {
            try decoder.handleConflictingOneOf()
            if case .rqProfileDelta(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._msgOneof = .rqProfileDelta(v)}
        case 11:
          var v: Net_EV_ProfileDelta?
          if let current = _storage._msgOneof {
            try decoder.handleConflictingOneOf()
            if case .evProfileDelta(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._msgOneof = .evProfileDelta(v)}
        case 12:
          var v: Net_EV_PermissionDelta?
          if let current = _storage._msgOneof {
            try decoder.handleConflictingOneOf()
            if case .evPermissionDelta(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._msgOneof = .evPermissionDelta(v)}
        case 13:
          var v: Net_RQ_Generate?
          if let current = _storage._msgOneof {
            try decoder.handleConflictingOneOf()
            if case .rqGenerate(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._msgOneof = .rqGenerate(v)}
        case 14:
          var v: Net_RQ_AddGroup?
          if let current = _storage._msgOneof {
            try decoder.handleConflictingOneOf()
            if case .rqAddGroup(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._msgOneof = .rqAddGroup(v)}
        case 15:
          var v: Net_RQ_RemoveGroup?
          if let current = _storage._msgOneof {
            try decoder.handleConflictingOneOf()
            if case .rqRemoveGroup(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._msgOneof = .rqRemoveGroup(v)}
        case 16:
          var v: Net_RQ_ListGroups?
          if let current = _storage._msgOneof {
            try decoder.handleConflictingOneOf()
            if case .rqListGroups(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._msgOneof = .rqListGroups(v)}
        case 17:
          var v: Net_RQ_GroupDelta?
          if let current = _storage._msgOneof {
            try decoder.handleConflictingOneOf()
            if case .rqGroupDelta(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._msgOneof = .rqGroupDelta(v)}
        case 18:
          var v: Net_RQ_AddListener?
          if let current = _storage._msgOneof {
            try decoder.handleConflictingOneOf()
            if case .rqAddListener(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._msgOneof = .rqAddListener(v)}
        case 19:
          var v: Net_RQ_RemoveListener?
          if let current = _storage._msgOneof {
            try decoder.handleConflictingOneOf()
            if case .rqRemoveListener(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._msgOneof = .rqRemoveListener(v)}
        case 20:
          var v: Net_RQ_ListenerDelta?
          if let current = _storage._msgOneof {
            try decoder.handleConflictingOneOf()
            if case .rqListenerDelta(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._msgOneof = .rqListenerDelta(v)}
        case 21:
          var v: Net_RQ_ChangeListener?
          if let current = _storage._msgOneof {
            try decoder.handleConflictingOneOf()
            if case .rqChangeListener(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._msgOneof = .rqChangeListener(v)}
        case 22:
          var v: Net_RQ_Login?
          if let current = _storage._msgOneof {
            try decoder.handleConflictingOneOf()
            if case .rqLogin(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._msgOneof = .rqLogin(v)}
        case 23:
          var v: Net_EV_EndpointClosed?
          if let current = _storage._msgOneof {
            try decoder.handleConflictingOneOf()
            if case .evEndpointClosed(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._msgOneof = .evEndpointClosed(v)}
        case 24:
          var v: Net_EV_NetworkDelta?
          if let current = _storage._msgOneof {
            try decoder.handleConflictingOneOf()
            if case .evNetworkDelta(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._msgOneof = .evNetworkDelta(v)}
        case 25:
          var v: Net_RQ_DirectConnection?
          if let current = _storage._msgOneof {
            try decoder.handleConflictingOneOf()
            if case .rqDirectConnection(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._msgOneof = .rqDirectConnection(v)}
        case 26:
          var v: Net_RQ_Connection?
          if let current = _storage._msgOneof {
            try decoder.handleConflictingOneOf()
            if case .rqConnection(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._msgOneof = .rqConnection(v)}
        case 27:
          var v: Net_RQ_Ping?
          if let current = _storage._msgOneof {
            try decoder.handleConflictingOneOf()
            if case .rqPing(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._msgOneof = .rqPing(v)}
        case 28:
          var v: Net_RQ_ArtifactDownload?
          if let current = _storage._msgOneof {
            try decoder.handleConflictingOneOf()
            if case .rqArtifactDownload(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._msgOneof = .rqArtifactDownload(v)}
        case 29:
          var v: Net_RQ_PluginInstall?
          if let current = _storage._msgOneof {
            try decoder.handleConflictingOneOf()
            if case .rqPluginInstall(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._msgOneof = .rqPluginInstall(v)}
        case 30:
          var v: Net_RQ_PluginList?
          if let current = _storage._msgOneof {
            try decoder.handleConflictingOneOf()
            if case .rqPluginList(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._msgOneof = .rqPluginList(v)}
        case 31:
          var v: Net_RQ_ServerBanner?
          if let current = _storage._msgOneof {
            try decoder.handleConflictingOneOf()
            if case .rqServerBanner(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._msgOneof = .rqServerBanner(v)}
        case 32:
          var v: Net_RQ_StreamStart?
          if let current = _storage._msgOneof {
            try decoder.handleConflictingOneOf()
            if case .rqStreamStart(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._msgOneof = .rqStreamStart(v)}
        case 33:
          var v: Net_RQ_StreamStop?
          if let current = _storage._msgOneof {
            try decoder.handleConflictingOneOf()
            if case .rqStreamStop(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._msgOneof = .rqStreamStop(v)}
        case 34:
          var v: Net_RQ_AddUser?
          if let current = _storage._msgOneof {
            try decoder.handleConflictingOneOf()
            if case .rqAddUser(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._msgOneof = .rqAddUser(v)}
        case 35:
          var v: Net_RQ_RemoveUser?
          if let current = _storage._msgOneof {
            try decoder.handleConflictingOneOf()
            if case .rqRemoveUser(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._msgOneof = .rqRemoveUser(v)}
        case 36:
          var v: Net_RQ_UserDelta?
          if let current = _storage._msgOneof {
            try decoder.handleConflictingOneOf()
            if case .rqUserDelta(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._msgOneof = .rqUserDelta(v)}
        case 37:
          var v: Net_RQ_ClientMetadata?
          if let current = _storage._msgOneof {
            try decoder.handleConflictingOneOf()
            if case .rqClientMetadata(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._msgOneof = .rqClientMetadata(v)}
        case 38:
          var v: Net_RQ_PowerChange?
          if let current = _storage._msgOneof {
            try decoder.handleConflictingOneOf()
            if case .rqPowerChange(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._msgOneof = .rqPowerChange(v)}
        case 40:
          var v: Net_RQ_Screenshot?
          if let current = _storage._msgOneof {
            try decoder.handleConflictingOneOf()
            if case .rqScreenshot(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._msgOneof = .rqScreenshot(v)}
        case 42:
          var v: Net_RQ_FileDelete?
          if let current = _storage._msgOneof {
            try decoder.handleConflictingOneOf()
            if case .rqFileDelete(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._msgOneof = .rqFileDelete(v)}
        case 43:
          var v: Net_RQ_FileListing?
          if let current = _storage._msgOneof {
            try decoder.handleConflictingOneOf()
            if case .rqFileListing(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._msgOneof = .rqFileListing(v)}
        case 44:
          var v: Net_RQ_Execute?
          if let current = _storage._msgOneof {
            try decoder.handleConflictingOneOf()
            if case .rqExecute(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._msgOneof = .rqExecute(v)}
        case 100:
          var v: Net_RQ_Cvid?
          if let current = _storage._msgOneof {
            try decoder.handleConflictingOneOf()
            if case .rqCvid(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._msgOneof = .rqCvid(v)}
        case 101:
          var v: Net_RS_Cvid?
          if let current = _storage._msgOneof {
            try decoder.handleConflictingOneOf()
            if case .rsCvid(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._msgOneof = .rsCvid(v)}
        case 1010:
          var v: Net_RS_ProfileDelta?
          if let current = _storage._msgOneof {
            try decoder.handleConflictingOneOf()
            if case .rsProfileDelta(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._msgOneof = .rsProfileDelta(v)}
        case 1013:
          var v: Net_RS_Generate?
          if let current = _storage._msgOneof {
            try decoder.handleConflictingOneOf()
            if case .rsGenerate(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._msgOneof = .rsGenerate(v)}
        case 1016:
          var v: Net_RS_ListGroups?
          if let current = _storage._msgOneof {
            try decoder.handleConflictingOneOf()
            if case .rsListGroups(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._msgOneof = .rsListGroups(v)}
        case 1022:
          var v: Net_RQ_Logout?
          if let current = _storage._msgOneof {
            try decoder.handleConflictingOneOf()
            if case .rqLogout(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._msgOneof = .rqLogout(v)}
        case 1025:
          var v: Net_RS_DirectConnection?
          if let current = _storage._msgOneof {
            try decoder.handleConflictingOneOf()
            if case .rsDirectConnection(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._msgOneof = .rsDirectConnection(v)}
        case 1027:
          var v: Net_RS_Ping?
          if let current = _storage._msgOneof {
            try decoder.handleConflictingOneOf()
            if case .rsPing(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._msgOneof = .rsPing(v)}
        case 1028:
          var v: Net_RS_ArtifactDownload?
          if let current = _storage._msgOneof {
            try decoder.handleConflictingOneOf()
            if case .rsArtifactDownload(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._msgOneof = .rsArtifactDownload(v)}
        case 1030:
          var v: Net_RS_PluginList?
          if let current = _storage._msgOneof {
            try decoder.handleConflictingOneOf()
            if case .rsPluginList(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._msgOneof = .rsPluginList(v)}
        case 1031:
          var v: Net_RS_ServerBanner?
          if let current = _storage._msgOneof {
            try decoder.handleConflictingOneOf()
            if case .rsServerBanner(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._msgOneof = .rsServerBanner(v)}
        case 1032:
          var v: Net_RS_StreamStart?
          if let current = _storage._msgOneof {
            try decoder.handleConflictingOneOf()
            if case .rsStreamStart(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._msgOneof = .rsStreamStart(v)}
        case 1037:
          var v: Net_RS_ClientMetadata?
          if let current = _storage._msgOneof {
            try decoder.handleConflictingOneOf()
            if case .rsClientMetadata(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._msgOneof = .rsClientMetadata(v)}
        case 1040:
          var v: Net_RS_Screenshot?
          if let current = _storage._msgOneof {
            try decoder.handleConflictingOneOf()
            if case .rsScreenshot(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._msgOneof = .rsScreenshot(v)}
        case 1043:
          var v: Net_RS_FileListing?
          if let current = _storage._msgOneof {
            try decoder.handleConflictingOneOf()
            if case .rsFileListing(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._msgOneof = .rsFileListing(v)}
        case 1044:
          var v: Net_RS_Execute?
          if let current = _storage._msgOneof {
            try decoder.handleConflictingOneOf()
            if case .rsExecute(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._msgOneof = .rsExecute(v)}
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._to != 0 {
        try visitor.visitSingularInt32Field(value: _storage._to, fieldNumber: 1)
      }
      if _storage._from != 0 {
        try visitor.visitSingularInt32Field(value: _storage._from, fieldNumber: 2)
      }
      if _storage._id != 0 {
        try visitor.visitSingularInt32Field(value: _storage._id, fieldNumber: 3)
      }
      switch _storage._msgOneof {
      case .plugin(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      case .evStreamData(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      case .rsOutcome(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      case .rqNoAuth(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      case .rqPasswordAuth(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      case .rqKeyAuth(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      case .rqProfileDelta(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      case .evProfileDelta(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      case .evPermissionDelta(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      case .rqGenerate(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      case .rqAddGroup(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      case .rqRemoveGroup(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      case .rqListGroups(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
      case .rqGroupDelta(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
      case .rqAddListener(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
      case .rqRemoveListener(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 19)
      case .rqListenerDelta(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
      case .rqChangeListener(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 21)
      case .rqLogin(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 22)
      case .evEndpointClosed(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 23)
      case .evNetworkDelta(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 24)
      case .rqDirectConnection(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 25)
      case .rqConnection(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 26)
      case .rqPing(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 27)
      case .rqArtifactDownload(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 28)
      case .rqPluginInstall(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 29)
      case .rqPluginList(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 30)
      case .rqServerBanner(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 31)
      case .rqStreamStart(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 32)
      case .rqStreamStop(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 33)
      case .rqAddUser(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 34)
      case .rqRemoveUser(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 35)
      case .rqUserDelta(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 36)
      case .rqClientMetadata(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 37)
      case .rqPowerChange(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 38)
      case .rqScreenshot(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 40)
      case .rqFileDelete(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 42)
      case .rqFileListing(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 43)
      case .rqExecute(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 44)
      case .rqCvid(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 100)
      case .rsCvid(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 101)
      case .rsProfileDelta(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1010)
      case .rsGenerate(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1013)
      case .rsListGroups(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1016)
      case .rqLogout(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1022)
      case .rsDirectConnection(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1025)
      case .rsPing(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1027)
      case .rsArtifactDownload(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1028)
      case .rsPluginList(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1030)
      case .rsServerBanner(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1031)
      case .rsStreamStart(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1032)
      case .rsClientMetadata(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1037)
      case .rsScreenshot(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1040)
      case .rsFileListing(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1043)
      case .rsExecute(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1044)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Net_Message, rhs: Net_Message) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._to != rhs_storage._to {return false}
        if _storage._from != rhs_storage._from {return false}
        if _storage._id != rhs_storage._id {return false}
        if _storage._msgOneof != rhs_storage._msgOneof {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
