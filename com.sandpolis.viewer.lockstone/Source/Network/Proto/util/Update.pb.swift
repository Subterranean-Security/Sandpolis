//****************************************************************************//
//                                                                            //
//                Copyright Â© 2015 - 2019 Subterranean Security               //
//                                                                            //
//  Licensed under the Apache License, Version 2.0 (the "License");           //
//  you may not use this file except in compliance with the License.          //
//  You may obtain a copy of the License at                                   //
//                                                                            //
//      http://www.apache.org/licenses/LICENSE-2.0                            //
//                                                                            //
//  Unless required by applicable law or agreed to in writing, software       //
//  distributed under the License is distributed on an "AS IS" BASIS,         //
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  //
//  See the License for the specific language governing permissions and       //
//  limitations under the License.                                            //
//                                                                            //
//****************************************************************************//
import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///*
/// A singular update to an attribute.
struct Util_AttributeUpdate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var timestamp: Int64 = 0

  var update: Util_AttributeUpdate.OneOf_Update? = nil

  var string: String {
    get {
      if case .string(let v)? = update {return v}
      return String()
    }
    set {update = .string(newValue)}
  }

  var integer: Int32 {
    get {
      if case .integer(let v)? = update {return v}
      return 0
    }
    set {update = .integer(newValue)}
  }

  var long: Int64 {
    get {
      if case .long(let v)? = update {return v}
      return 0
    }
    set {update = .long(newValue)}
  }

  var boolean: Bool {
    get {
      if case .boolean(let v)? = update {return v}
      return false
    }
    set {update = .boolean(newValue)}
  }

  var double: Double {
    get {
      if case .double(let v)? = update {return v}
      return 0
    }
    set {update = .double(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Update: Equatable {
    case string(String)
    case integer(Int32)
    case long(Int64)
    case boolean(Bool)
    case double(Double)

  #if !swift(>=4.1)
    static func ==(lhs: Util_AttributeUpdate.OneOf_Update, rhs: Util_AttributeUpdate.OneOf_Update) -> Bool {
      switch (lhs, rhs) {
      case (.string(let l), .string(let r)): return l == r
      case (.integer(let l), .integer(let r)): return l == r
      case (.long(let l), .long(let r)): return l == r
      case (.boolean(let l), .boolean(let r)): return l == r
      case (.double(let l), .double(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  init() {}
}

///*
/// An update for an attribute node.
struct Util_AttributeNodeUpdate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Updates for child attribute nodes
  var attributeNodeUpdate: Dictionary<Int32,Util_AttributeNodeUpdate> = [:]

  /// Attribute updates for the current node
  var attributeUpdate: [Util_AttributeUpdate] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Util_ProfileUpdate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var rootUpdate: Util_AttributeNodeUpdate {
    get {return _storage._rootUpdate ?? Util_AttributeNodeUpdate()}
    set {_uniqueStorage()._rootUpdate = newValue}
  }
  /// Returns true if `rootUpdate` has been explicitly set.
  var hasRootUpdate: Bool {return _storage._rootUpdate != nil}
  /// Clears the value of `rootUpdate`. Subsequent reads from it will return its default value.
  mutating func clearRootUpdate() {_uniqueStorage()._rootUpdate = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "util"

extension Util_AttributeUpdate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AttributeUpdate"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "timestamp"),
    3: .same(proto: "string"),
    4: .same(proto: "integer"),
    5: .same(proto: "long"),
    6: .same(proto: "boolean"),
    7: .same(proto: "double"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.timestamp)
      case 3:
        if self.update != nil {try decoder.handleConflictingOneOf()}
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {self.update = .string(v)}
      case 4:
        if self.update != nil {try decoder.handleConflictingOneOf()}
        var v: Int32?
        try decoder.decodeSingularInt32Field(value: &v)
        if let v = v {self.update = .integer(v)}
      case 5:
        if self.update != nil {try decoder.handleConflictingOneOf()}
        var v: Int64?
        try decoder.decodeSingularInt64Field(value: &v)
        if let v = v {self.update = .long(v)}
      case 6:
        if self.update != nil {try decoder.handleConflictingOneOf()}
        var v: Bool?
        try decoder.decodeSingularBoolField(value: &v)
        if let v = v {self.update = .boolean(v)}
      case 7:
        if self.update != nil {try decoder.handleConflictingOneOf()}
        var v: Double?
        try decoder.decodeSingularDoubleField(value: &v)
        if let v = v {self.update = .double(v)}
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.timestamp != 0 {
      try visitor.visitSingularInt64Field(value: self.timestamp, fieldNumber: 1)
    }
    switch self.update {
    case .string(let v)?:
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    case .integer(let v)?:
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 4)
    case .long(let v)?:
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 5)
    case .boolean(let v)?:
      try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
    case .double(let v)?:
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 7)
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Util_AttributeUpdate, rhs: Util_AttributeUpdate) -> Bool {
    if lhs.timestamp != rhs.timestamp {return false}
    if lhs.update != rhs.update {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Util_AttributeNodeUpdate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AttributeNodeUpdate"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "attribute_node_update"),
    2: .standard(proto: "attribute_update"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufInt32,Util_AttributeNodeUpdate>.self, value: &self.attributeNodeUpdate)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.attributeUpdate)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.attributeNodeUpdate.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufInt32,Util_AttributeNodeUpdate>.self, value: self.attributeNodeUpdate, fieldNumber: 1)
    }
    if !self.attributeUpdate.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.attributeUpdate, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Util_AttributeNodeUpdate, rhs: Util_AttributeNodeUpdate) -> Bool {
    if lhs.attributeNodeUpdate != rhs.attributeNodeUpdate {return false}
    if lhs.attributeUpdate != rhs.attributeUpdate {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Util_ProfileUpdate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ProfileUpdate"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "root_update"),
  ]

  fileprivate class _StorageClass {
    var _rootUpdate: Util_AttributeNodeUpdate? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _rootUpdate = source._rootUpdate
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._rootUpdate)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._rootUpdate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Util_ProfileUpdate, rhs: Util_ProfileUpdate) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._rootUpdate != rhs_storage._rootUpdate {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
