//****************************************************************************//
//                                                                            //
//                Copyright Â© 2015 - 2019 Subterranean Security               //
//                                                                            //
//  Licensed under the Apache License, Version 2.0 (the "License");           //
//  you may not use this file except in compliance with the License.          //
//  You may obtain a copy of the License at                                   //
//                                                                            //
//      http://www.apache.org/licenses/LICENSE-2.0                            //
//                                                                            //
//  Unless required by applicable law or agreed to in writing, software       //
//  distributed under the License is distributed on an "AS IS" BASIS,         //
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  //
//  See the License for the specific language governing permissions and       //
//  limitations under the License.                                            //
//                                                                            //
//****************************************************************************//
import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///*
/// An enumeration of universal error codes.
enum Util_ErrorCode: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// No error
  case ok // = 0

  /// Access was denied
  case accessDenied // = 10

  /// The username did not meet requirements
  case invalidUsername // = 100

  /// The password did not meet requirements
  case invalidPassword // = 101

  /// The email address did not meet requirements
  case invalidEmail // = 102

  /// The port number did not meet requirements
  case invalidPort // = 103

  /// The X509 certificate did not meet requirements
  case invalidCertificate // = 104

  /// The key did not meet requirements
  case invalidKey // = 105

  /// The IP address did not meet requirements
  case invalidAddress // = 106

  /// The authentication group name did not meet requirements
  case invalidGroupname // = 107

  /// The ID did not meet requirements
  case invalidID // = 108

  /// The nonce did not meet requirements
  case invalidNonce // = 109

  /// The listener's state did not meet requirements
  case invalidListenerState // = 110

  /// The user could not be found
  case unknownUser // = 200

  /// The group could not be found
  case unknownGroup // = 201

  /// The listener could not be found
  case unknownListener // = 202

  /// The key challenge failed
  case failureKeyChallenge // = 300
  case UNRECOGNIZED(Int)

  init() {
    self = .ok
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .ok
    case 10: self = .accessDenied
    case 100: self = .invalidUsername
    case 101: self = .invalidPassword
    case 102: self = .invalidEmail
    case 103: self = .invalidPort
    case 104: self = .invalidCertificate
    case 105: self = .invalidKey
    case 106: self = .invalidAddress
    case 107: self = .invalidGroupname
    case 108: self = .invalidID
    case 109: self = .invalidNonce
    case 110: self = .invalidListenerState
    case 200: self = .unknownUser
    case 201: self = .unknownGroup
    case 202: self = .unknownListener
    case 300: self = .failureKeyChallenge
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .ok: return 0
    case .accessDenied: return 10
    case .invalidUsername: return 100
    case .invalidPassword: return 101
    case .invalidEmail: return 102
    case .invalidPort: return 103
    case .invalidCertificate: return 104
    case .invalidKey: return 105
    case .invalidAddress: return 106
    case .invalidGroupname: return 107
    case .invalidID: return 108
    case .invalidNonce: return 109
    case .invalidListenerState: return 110
    case .unknownUser: return 200
    case .unknownGroup: return 201
    case .unknownListener: return 202
    case .failureKeyChallenge: return 300
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Util_ErrorCode: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Util_ErrorCode] = [
    .ok,
    .accessDenied,
    .invalidUsername,
    .invalidPassword,
    .invalidEmail,
    .invalidPort,
    .invalidCertificate,
    .invalidKey,
    .invalidAddress,
    .invalidGroupname,
    .invalidID,
    .invalidNonce,
    .invalidListenerState,
    .unknownUser,
    .unknownGroup,
    .unknownListener,
    .failureKeyChallenge,
  ]
}

#endif  // swift(>=4.2)

///*
/// A representation of the final result of some generic action.
struct Util_Outcome {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The result of the action
  var result: Bool = false

  /// A comment on the result
  var comment: String = String()

  /// The duration of the action in milliseconds
  var time: Int64 = 0

  /// An action name
  var action: String = String()

  /// An exception in standard Java format
  var exception: String = String()

  /// A predefined error code
  var error: Util_ErrorCode = .ok

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "util"

extension Util_ErrorCode: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "OK"),
    10: .same(proto: "ACCESS_DENIED"),
    100: .same(proto: "INVALID_USERNAME"),
    101: .same(proto: "INVALID_PASSWORD"),
    102: .same(proto: "INVALID_EMAIL"),
    103: .same(proto: "INVALID_PORT"),
    104: .same(proto: "INVALID_CERTIFICATE"),
    105: .same(proto: "INVALID_KEY"),
    106: .same(proto: "INVALID_ADDRESS"),
    107: .same(proto: "INVALID_GROUPNAME"),
    108: .same(proto: "INVALID_ID"),
    109: .same(proto: "INVALID_NONCE"),
    110: .same(proto: "INVALID_LISTENER_STATE"),
    200: .same(proto: "UNKNOWN_USER"),
    201: .same(proto: "UNKNOWN_GROUP"),
    202: .same(proto: "UNKNOWN_LISTENER"),
    300: .same(proto: "FAILURE_KEY_CHALLENGE"),
  ]
}

extension Util_Outcome: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Outcome"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "result"),
    2: .same(proto: "comment"),
    3: .same(proto: "time"),
    4: .same(proto: "action"),
    5: .same(proto: "exception"),
    6: .same(proto: "error"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self.result)
      case 2: try decoder.decodeSingularStringField(value: &self.comment)
      case 3: try decoder.decodeSingularInt64Field(value: &self.time)
      case 4: try decoder.decodeSingularStringField(value: &self.action)
      case 5: try decoder.decodeSingularStringField(value: &self.exception)
      case 6: try decoder.decodeSingularEnumField(value: &self.error)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.result != false {
      try visitor.visitSingularBoolField(value: self.result, fieldNumber: 1)
    }
    if !self.comment.isEmpty {
      try visitor.visitSingularStringField(value: self.comment, fieldNumber: 2)
    }
    if self.time != 0 {
      try visitor.visitSingularInt64Field(value: self.time, fieldNumber: 3)
    }
    if !self.action.isEmpty {
      try visitor.visitSingularStringField(value: self.action, fieldNumber: 4)
    }
    if !self.exception.isEmpty {
      try visitor.visitSingularStringField(value: self.exception, fieldNumber: 5)
    }
    if self.error != .ok {
      try visitor.visitSingularEnumField(value: self.error, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Util_Outcome, rhs: Util_Outcome) -> Bool {
    if lhs.result != rhs.result {return false}
    if lhs.comment != rhs.comment {return false}
    if lhs.time != rhs.time {return false}
    if lhs.action != rhs.action {return false}
    if lhs.exception != rhs.exception {return false}
    if lhs.error != rhs.error {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
