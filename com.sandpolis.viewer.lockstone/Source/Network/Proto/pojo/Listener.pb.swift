//****************************************************************************//
//                                                                            //
//                Copyright Â© 2015 - 2019 Subterranean Security               //
//                                                                            //
//  Licensed under the Apache License, Version 2.0 (the "License");           //
//  you may not use this file except in compliance with the License.          //
//  You may obtain a copy of the License at                                   //
//                                                                            //
//      http://www.apache.org/licenses/LICENSE-2.0                            //
//                                                                            //
//  Unless required by applicable law or agreed to in writing, software       //
//  distributed under the License is distributed on an "AS IS" BASIS,         //
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  //
//  See the License for the specific language governing permissions and       //
//  limitations under the License.                                            //
//                                                                            //
//****************************************************************************//
import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///*
/// Listener configuration.
struct Pojo_ListenerConfig {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The listener ID
  var id: Int64 {
    get {return _id ?? 0}
    set {_id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  var hasID: Bool {return self._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  mutating func clearID() {self._id = nil}

  /// An optional name for the listener
  var name: String {
    get {return _name ?? String()}
    set {_name = newValue}
  }
  /// Returns true if `name` has been explicitly set.
  var hasName: Bool {return self._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
  mutating func clearName() {self._name = nil}

  /// The listening port
  var port: Int32 {
    get {return _port ?? 0}
    set {_port = newValue}
  }
  /// Returns true if `port` has been explicitly set.
  var hasPort: Bool {return self._port != nil}
  /// Clears the value of `port`. Subsequent reads from it will return its default value.
  mutating func clearPort() {self._port = nil}

  /// The bind address
  var address: String {
    get {return _address ?? String()}
    set {_address = newValue}
  }
  /// Returns true if `address` has been explicitly set.
  var hasAddress: Bool {return self._address != nil}
  /// Clears the value of `address`. Subsequent reads from it will return its default value.
  mutating func clearAddress() {self._address = nil}

  /// The username of the user that owns the listener
  var owner: String {
    get {return _owner ?? String()}
    set {_owner = newValue}
  }
  /// Returns true if `owner` has been explicitly set.
  var hasOwner: Bool {return self._owner != nil}
  /// Clears the value of `owner`. Subsequent reads from it will return its default value.
  mutating func clearOwner() {self._owner = nil}

  /// Indicates whether automatic port forwarding with UPnP will be attempted
  var upnp: Bool {
    get {return _upnp ?? false}
    set {_upnp = newValue}
  }
  /// Returns true if `upnp` has been explicitly set.
  var hasUpnp: Bool {return self._upnp != nil}
  /// Clears the value of `upnp`. Subsequent reads from it will return its default value.
  mutating func clearUpnp() {self._upnp = nil}

  /// Indicates whether client instances can be accepted by the listener
  var clientAcceptor: Bool {
    get {return _clientAcceptor ?? false}
    set {_clientAcceptor = newValue}
  }
  /// Returns true if `clientAcceptor` has been explicitly set.
  var hasClientAcceptor: Bool {return self._clientAcceptor != nil}
  /// Clears the value of `clientAcceptor`. Subsequent reads from it will return its default value.
  mutating func clearClientAcceptor() {self._clientAcceptor = nil}

  /// Indicates whether viewer instances can be accepted by the listener
  var viewerAcceptor: Bool {
    get {return _viewerAcceptor ?? false}
    set {_viewerAcceptor = newValue}
  }
  /// Returns true if `viewerAcceptor` has been explicitly set.
  var hasViewerAcceptor: Bool {return self._viewerAcceptor != nil}
  /// Clears the value of `viewerAcceptor`. Subsequent reads from it will return its default value.
  mutating func clearViewerAcceptor() {self._viewerAcceptor = nil}

  /// Indicates whether the listener can be started
  var enabled: Bool {
    get {return _enabled ?? false}
    set {_enabled = newValue}
  }
  /// Returns true if `enabled` has been explicitly set.
  var hasEnabled: Bool {return self._enabled != nil}
  /// Clears the value of `enabled`. Subsequent reads from it will return its default value.
  mutating func clearEnabled() {self._enabled = nil}

  /// Certificate
  var cert: Data {
    get {return _cert ?? SwiftProtobuf.Internal.emptyData}
    set {_cert = newValue}
  }
  /// Returns true if `cert` has been explicitly set.
  var hasCert: Bool {return self._cert != nil}
  /// Clears the value of `cert`. Subsequent reads from it will return its default value.
  mutating func clearCert() {self._cert = nil}

  /// Private key for the certificate
  var key: Data {
    get {return _key ?? SwiftProtobuf.Internal.emptyData}
    set {_key = newValue}
  }
  /// Returns true if `key` has been explicitly set.
  var hasKey: Bool {return self._key != nil}
  /// Clears the value of `key`. Subsequent reads from it will return its default value.
  mutating func clearKey() {self._key = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _id: Int64? = nil
  fileprivate var _name: String? = nil
  fileprivate var _port: Int32? = nil
  fileprivate var _address: String? = nil
  fileprivate var _owner: String? = nil
  fileprivate var _upnp: Bool? = nil
  fileprivate var _clientAcceptor: Bool? = nil
  fileprivate var _viewerAcceptor: Bool? = nil
  fileprivate var _enabled: Bool? = nil
  fileprivate var _cert: Data? = nil
  fileprivate var _key: Data? = nil
}

///*
/// Listener statistics.
struct Pojo_ListenerStats {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The listener's start timestamp
  var listenTimestamp: Int64 {
    get {return _listenTimestamp ?? 0}
    set {_listenTimestamp = newValue}
  }
  /// Returns true if `listenTimestamp` has been explicitly set.
  var hasListenTimestamp: Bool {return self._listenTimestamp != nil}
  /// Clears the value of `listenTimestamp`. Subsequent reads from it will return its default value.
  mutating func clearListenTimestamp() {self._listenTimestamp = nil}

  /// The number of currently active connections spawned from the listener
  var activeConnections: Int32 {
    get {return _activeConnections ?? 0}
    set {_activeConnections = newValue}
  }
  /// Returns true if `activeConnections` has been explicitly set.
  var hasActiveConnections: Bool {return self._activeConnections != nil}
  /// Clears the value of `activeConnections`. Subsequent reads from it will return its default value.
  mutating func clearActiveConnections() {self._activeConnections = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _listenTimestamp: Int64? = nil
  fileprivate var _activeConnections: Int32? = nil
}

///*
/// A Listener container.
struct Pojo_ProtoListener {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var config: Pojo_ListenerConfig {
    get {return _storage._config ?? Pojo_ListenerConfig()}
    set {_uniqueStorage()._config = newValue}
  }
  /// Returns true if `config` has been explicitly set.
  var hasConfig: Bool {return _storage._config != nil}
  /// Clears the value of `config`. Subsequent reads from it will return its default value.
  mutating func clearConfig() {_uniqueStorage()._config = nil}

  var stats: Pojo_ListenerStats {
    get {return _storage._stats ?? Pojo_ListenerStats()}
    set {_uniqueStorage()._stats = newValue}
  }
  /// Returns true if `stats` has been explicitly set.
  var hasStats: Bool {return _storage._stats != nil}
  /// Clears the value of `stats`. Subsequent reads from it will return its default value.
  mutating func clearStats() {_uniqueStorage()._stats = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "pojo"

extension Pojo_ListenerConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ListenerConfig"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    3: .same(proto: "port"),
    4: .same(proto: "address"),
    5: .same(proto: "owner"),
    6: .same(proto: "upnp"),
    7: .standard(proto: "client_acceptor"),
    8: .standard(proto: "viewer_acceptor"),
    9: .same(proto: "enabled"),
    10: .same(proto: "cert"),
    11: .same(proto: "key"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self._id)
      case 2: try decoder.decodeSingularStringField(value: &self._name)
      case 3: try decoder.decodeSingularInt32Field(value: &self._port)
      case 4: try decoder.decodeSingularStringField(value: &self._address)
      case 5: try decoder.decodeSingularStringField(value: &self._owner)
      case 6: try decoder.decodeSingularBoolField(value: &self._upnp)
      case 7: try decoder.decodeSingularBoolField(value: &self._clientAcceptor)
      case 8: try decoder.decodeSingularBoolField(value: &self._viewerAcceptor)
      case 9: try decoder.decodeSingularBoolField(value: &self._enabled)
      case 10: try decoder.decodeSingularBytesField(value: &self._cert)
      case 11: try decoder.decodeSingularBytesField(value: &self._key)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._id {
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 1)
    }
    if let v = self._name {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if let v = self._port {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 3)
    }
    if let v = self._address {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    }
    if let v = self._owner {
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    }
    if let v = self._upnp {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
    }
    if let v = self._clientAcceptor {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 7)
    }
    if let v = self._viewerAcceptor {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 8)
    }
    if let v = self._enabled {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 9)
    }
    if let v = self._cert {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 10)
    }
    if let v = self._key {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 11)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Pojo_ListenerConfig, rhs: Pojo_ListenerConfig) -> Bool {
    if lhs._id != rhs._id {return false}
    if lhs._name != rhs._name {return false}
    if lhs._port != rhs._port {return false}
    if lhs._address != rhs._address {return false}
    if lhs._owner != rhs._owner {return false}
    if lhs._upnp != rhs._upnp {return false}
    if lhs._clientAcceptor != rhs._clientAcceptor {return false}
    if lhs._viewerAcceptor != rhs._viewerAcceptor {return false}
    if lhs._enabled != rhs._enabled {return false}
    if lhs._cert != rhs._cert {return false}
    if lhs._key != rhs._key {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Pojo_ListenerStats: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ListenerStats"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "listen_timestamp"),
    2: .standard(proto: "active_connections"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self._listenTimestamp)
      case 2: try decoder.decodeSingularInt32Field(value: &self._activeConnections)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._listenTimestamp {
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 1)
    }
    if let v = self._activeConnections {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Pojo_ListenerStats, rhs: Pojo_ListenerStats) -> Bool {
    if lhs._listenTimestamp != rhs._listenTimestamp {return false}
    if lhs._activeConnections != rhs._activeConnections {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Pojo_ProtoListener: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ProtoListener"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "config"),
    2: .same(proto: "stats"),
  ]

  fileprivate class _StorageClass {
    var _config: Pojo_ListenerConfig? = nil
    var _stats: Pojo_ListenerStats? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _config = source._config
      _stats = source._stats
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._config)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._stats)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._config {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._stats {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Pojo_ProtoListener, rhs: Pojo_ProtoListener) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._config != rhs_storage._config {return false}
        if _storage._stats != rhs_storage._stats {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
