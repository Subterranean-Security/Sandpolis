/*******************************************************************************
* SANDPOLIS                                                                    *
* com.sandpolis.client.mega                                                    *
*******************************************************************************/

buildscript {
	dependencies {
		classpath ':com.sandpolis.gradle.soi:'
	}
}

plugins {
	id 'eclipse'
	id 'java'
	id 'com.github.onslip.gradle-one-jar' version '1.0.5'
}

apply plugin: 'com.sandpolis.gradle.soi'

eclipse {
	project {
		name = 'com.sandpolis.client.mega'
		comment = 'The mega-client instance'
	}
}

dependencies {
	testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.4.1'

	implementation project(':dep:com.sandpolis.core.instance')
	implementation project(':dep:com.sandpolis.core.ipc')
	implementation project(':dep:com.sandpolis.core.net')
	implementation project(':dep:com.sandpolis.core.proto')
	implementation project(':dep:com.sandpolis.core.soi')
	implementation project(':dep:com.sandpolis.core.util')

	// https://github.com/google/guava
	implementation 'com.google.guava:guava:27.1-jre'

	// https://github.com/netty/netty
	implementation 'io.netty:netty-common:4.1.34.Final'
	implementation 'io.netty:netty-codec:4.1.34.Final'
	implementation 'io.netty:netty-transport:4.1.34.Final'
	implementation 'io.netty:netty-handler:4.1.34.Final'

	implementation 'javax.persistence:javax.persistence-api:2.2'

	// https://github.com/qos-ch/slf4j
	implementation 'org.slf4j:slf4j-api:1.7.26'
}

jar {
	manifest {
		attributes(
			'Main-Class': 'com.sandpolis.client.mega.Main'
		)
	}
}

// Add OneJar task to produce a jar capable of nested dependencies, but don't
// actually add them yet
task one_jar(type: OneJar) {
	mainClass = 'com.sandpolis.client.mega.Main' 
}
project.tasks.assemble.dependsOn project.tasks.one_jar

// Create a custom configuration containing the nested jar
configurations {
	onejarArtifact.extendsFrom runtimeClasspath
}
artifacts {
	onejarArtifact one_jar
}